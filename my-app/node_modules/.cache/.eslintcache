[{"C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\index.tsx":"1","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\reportWebVitals.ts":"2","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\App.tsx":"3","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\MainView.tsx":"4","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\GameBoardComponent.tsx":"5","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\util\\GameStateProvider.ts":"6","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\util\\utils.ts":"7","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\HandComponent.tsx":"8","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\PouchComponent.tsx":"9","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\PlayerInfoComponent.tsx":"10","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\BoardTileComponent.tsx":"11","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\state.ts":"12","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\LetterTileComponent.tsx":"13","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\DialogComponent.tsx":"14","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\ScrabbleLogo.tsx":"15","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\PlayerInfoPopupComponent.tsx":"16"},{"size":839,"mtime":1648834772893,"results":"17","hashOfConfig":"18"},{"size":440,"mtime":1646850054889,"results":"19","hashOfConfig":"18"},{"size":2808,"mtime":1671293528563,"results":"20","hashOfConfig":"18"},{"size":309,"mtime":1646850054889,"results":"21","hashOfConfig":"18"},{"size":6729,"mtime":1671652978271,"results":"22","hashOfConfig":"18"},{"size":7930,"mtime":1647628717630,"results":"23","hashOfConfig":"18"},{"size":2048,"mtime":1671370785345,"results":"24","hashOfConfig":"18"},{"size":4317,"mtime":1671474823030,"results":"25","hashOfConfig":"18"},{"size":3869,"mtime":1671653098094,"results":"26","hashOfConfig":"18"},{"size":5007,"mtime":1671561249291,"results":"27","hashOfConfig":"18"},{"size":6432,"mtime":1671474019320,"results":"28","hashOfConfig":"18"},{"size":383,"mtime":1652604911263,"results":"29","hashOfConfig":"18"},{"size":2624,"mtime":1671556294170,"results":"30","hashOfConfig":"18"},{"size":1731,"mtime":1671561096830,"results":"31","hashOfConfig":"18"},{"size":25348,"mtime":1648393479393,"results":"32","hashOfConfig":"18"},{"size":984,"mtime":1671653416466,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"w07eo",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\index.tsx",[],["75","76"],"C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\reportWebVitals.ts",[],"C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\App.tsx",["77","78","79","80"],"import './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport styled from 'styled-components';\r\nimport { MainView } from './components/MainView';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { isLoggedIn, login } from './util/utils';\r\nimport axios from 'axios';\r\nimport { BE_URL } from './state';\r\nimport { toast } from 'react-toastify';\r\nimport ScrabbleLogo from './components/ScrabbleLogo';\r\n\r\nfunction App() {\r\n\r\n  const [isUserLoggedIn, setIsUserLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n\r\n    if (document.cookie === '')\r\n      setIsUserLoggedIn(false);\r\n\r\n    axios.get(BE_URL + \"/isLoggedIn?username=\" + document.cookie).then((response) => {\r\n      if (response.status == 200) {\r\n        const data = response.data;\r\n        setIsUserLoggedIn(data.isLoggedIn);\r\n      }\r\n      else\r\n        setIsUserLoggedIn(false);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/\">\r\n          {isUserLoggedIn ?\r\n            <MainView></MainView> :\r\n            <PlayerSelectView></PlayerSelectView>}\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n\r\n  );\r\n};\r\n\r\nconst PlayerSelectView = () => {\r\n  const usernameRef = useRef(null);\r\n\r\n  const logUserIn = () => {\r\n\r\n    if (!usernameRef || !usernameRef.current)\r\n      return;\r\n\r\n    const username = (usernameRef.current as HTMLInputElement).value;\r\n    if (username && username !== '') {\r\n      login(username)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <LoginMainDiv>\r\n      <ScrabbleLogo></ScrabbleLogo>\r\n      <PlayerSelectContainer>\r\n        <TitleH2>Insert username</TitleH2>\r\n        <TextField ref={usernameRef} placeholder={\"Username\"}></TextField>\r\n        <Button onClick={() => logUserIn()}>Enter</Button>\r\n      </PlayerSelectContainer>\r\n    </LoginMainDiv>\r\n  );\r\n\r\n}\r\n\r\nconst LoginMainDiv = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\nalign-items: center;\r\n`;\r\n\r\nconst TitleH2 = styled.h2`\r\n  font-weight: normal;\r\n  margin-bottom: 25px;  \r\n    margin-top: 2px;\r\n`;\r\n\r\nconst Button = styled.button`\r\npadding: 15px;\r\n    margin-top: 20px;\r\n    width: 150px;\r\n    border: 1px solid #386383;\r\n    border-radius: 10px;\r\n    background: #0e1d21;\r\n    color: white;\r\n    font-size: 14px;\r\n}\r\n`;\r\n\r\nconst TextField = styled.input`\r\n    padding: 14px;\r\n    border: 1px solid #386383;\r\n    border-radius: 3px;\r\n    background: #0e1d21;\r\n    color: white;\r\n    text-align: center;\r\n`;\r\n\r\nconst PlayerSelectContainer = styled.div`\r\n    display: flex;\r\n    color: white;\r\n    flex-direction: column;\r\n    align-content: center;\r\n    align-items: center;\r\n    padding: 20px;\r\n    width: 301px;\r\n    border: 1px #506483;\r\n    border-radius: 8px;\r\n    background: #081a1a;\r\n    border-style: double;\r\n  `;\r\n\r\nexport default App;\r\n","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\MainView.tsx",["81","82","83"],"import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { GameBoardComponent } from './GameBoardComponent';\r\nimport { PlayerInfo } from './PlayerInfoComponent';\r\n\r\nexport const MainView = () => {\r\n    return (   \r\n      <GameBoardComponent></GameBoardComponent>\r\n    )\r\n}\r\n\r\n","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\GameBoardComponent.tsx",["84","85"],"C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\util\\GameStateProvider.ts",["86","87"],"import axios from \"axios\";\r\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { BoardTile, GameState, LetterTile } from \"../../../scrabble-backend/server\";\r\nimport { BE_URL, BE_WS_URL } from \"../state\";\r\nimport { getCurrentPlayerName } from \"./utils\";\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\n\r\nconst initialGameState = {\r\n    playerPoints: {},\r\n    turnOfPlayer: \"\",\r\n    pouchLetters: [],\r\n    board: [],\r\n    playerHands: {}\r\n}\r\n\r\nexport const useGameState = () => {\r\n\r\n    const players = useMemo( () => [\"Player1\", \"Player2\"],[]); // TODO: move to backend\r\n\r\n    const [gameState, setGameState] = useState<GameState>(initialGameState);\r\n\r\n    const copyState = useCallback( (): GameState => {\r\n\r\n        const playerPoints = {};\r\n        const turnOfPlayer = \"\" + gameState.turnOfPlayer;\r\n        const pouchLetters = [...gameState.pouchLetters];\r\n        const board: BoardTile[][] = [];\r\n        const playerHands: Record<string, LetterTile[]> = {};\r\n\r\n        for(let playerName in gameState.playerPoints )\r\n            playerPoints[playerName] = gameState.playerPoints[playerName];\r\n\r\n        for (let i = 0; i < gameState.board.length; i++)\r\n            board[i] = gameState.board[i].slice();\r\n\r\n        for (let i in gameState.playerHands)\r\n            playerHands[i] = gameState.playerHands[i].slice();\r\n\r\n        return {\r\n            playerPoints,\r\n            turnOfPlayer,\r\n            pouchLetters,\r\n            board,\r\n            playerHands\r\n        }\r\n    },[gameState]);\r\n\r\n    const fetchGameStateFromBe = useCallback(() => {\r\n        axios.get(BE_URL + \"/game\").then((resp) => {\r\n            setGameState(resp.data);\r\n        })\r\n    }, []);\r\n\r\n    const sendGameStateToBE = async (state: GameState) => {\r\n        const resp = await axios.post(BE_URL + \"/game\", { game: state });\r\n        setGameState(resp.data);\r\n    };\r\n\r\n    const sendNewGameRequest = async() => {\r\n        const resp = await axios.get(BE_URL + \"/newgame\");\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        let client = new W3CWebSocket(BE_WS_URL);\r\n\r\n        client.onopen = () => {};\r\n\r\n        client.onmessage = (message) => {\r\n\r\n            const newGameState = JSON.parse(message.data as string);\r\n            if (newGameState)\r\n                setGameState(newGameState);\r\n        };\r\n\r\n        fetchGameStateFromBe();\r\n    }, [fetchGameStateFromBe]);\r\n\r\n    const getPlayers = (): string[] => Object.keys(gameState.playerHands);\r\n\r\n    const fillPlayerHand = (gs : GameState, playerName : string) => {\r\n        const playerHand = gs.playerHands[playerName];\r\n        while( playerHand.length < 7 && gs.pouchLetters.length !== 0 ) {\r\n\r\n            const idx = Math.floor((Math.random() * gs.pouchLetters.length));\r\n            const newLetter = gs.pouchLetters[idx];\r\n            playerHand.push(newLetter);\r\n            gs.pouchLetters.splice(idx,1);\r\n        }\r\n    };\r\n\r\n    const togglePlayerTurn = useCallback(async () => {\r\n        const gameStateCopy = copyState();\r\n        const nextPlayer = getNextPlayer();\r\n        gameStateCopy.turnOfPlayer = nextPlayer;\r\n        fillPlayerHand(gameStateCopy, getCurrentPlayerName());\r\n        await sendGameStateToBE(gameStateCopy);\r\n    }, [copyState, players]);\r\n\r\n    const getNextPlayer = () => {\r\n        const players = getPlayers();\r\n        let currentPlayerIdx = players.findIndex( (player) => player === gameState.turnOfPlayer );\r\n        currentPlayerIdx++;\r\n        if( currentPlayerIdx >= players.length )\r\n            currentPlayerIdx = 0;\r\n        return players[currentPlayerIdx];\r\n    }\r\n\r\n    const moveLetterToPouchFromHand = async (letter: LetterTile) => {\r\n        const gameStateCopy = copyState();\r\n\r\n        //make sure letter was in hand, prevent board->pouch movement\r\n        if( gameStateCopy.playerHands[getCurrentPlayerName()].findIndex( (handLetter) => handLetter.id === letter.id ) === -1 )\r\n            return;\r\n            \r\n        const idx = gameStateCopy.playerHands[getCurrentPlayerName()].findIndex(l => l.id === letter.id);\r\n        gameStateCopy.playerHands[getCurrentPlayerName()].splice(idx, 1);\r\n        gameStateCopy.pouchLetters.push(letter);\r\n        await sendGameStateToBE(gameStateCopy);\r\n    };\r\n\r\n    const moveLetterToHandFromPouch = async (letter: LetterTile) => {\r\n        const idx = gameState.pouchLetters.findIndex((pouchLetter) => pouchLetter.id === letter.id);\r\n        if (idx === -1) return;\r\n\r\n        const gameStateCopy = copyState();\r\n        gameStateCopy.pouchLetters.splice(idx, 1);\r\n        gameStateCopy.playerHands[getCurrentPlayerName()].push(letter);\r\n\r\n        await sendGameStateToBE(gameStateCopy);\r\n    }\r\n\r\n    const removeTileFromPlayerHand = (hand: LetterTile[], letterTile: LetterTile) => {\r\n        if (!hand || hand.length === 0) return;\r\n\r\n        const tileIdx = hand.findIndex((tile, idx) => tile.id === letterTile.id);\r\n        if (tileIdx === -1) return;\r\n\r\n        hand.splice(tileIdx, 1);\r\n    }\r\n\r\n    const moveLetterFromHandToBoard = async (letterTile: LetterTile, x: number, y: number) => {\r\n        const stateCopy = copyState();\r\n\r\n        // update board\r\n        stateCopy.board[x][y].letter = letterTile.letter;\r\n        stateCopy.board[x][y].points = letterTile.points;\r\n        stateCopy.board[x][y].letterTile = letterTile;\r\n\r\n        //update hand\r\n        removeTileFromPlayerHand(stateCopy.playerHands[getCurrentPlayerName()], letterTile);\r\n\r\n        await sendGameStateToBE(stateCopy);\r\n    }\r\n\r\n    const getLetterPosition = (letterTile : LetterTile) => {\r\n        for(let i = 0; i < gameState.board.length; i++) \r\n            for(let j = 0; j < gameState.board.length; j++)\r\n                if( gameState.board[i][j].letterTile?.id === letterTile.id )\r\n                    return { x: i, y: j };\r\n\r\n        return null;\r\n    };\r\n\r\n    const moveLetterFromBoardToBoard = async (letterTile : LetterTile, x : number, y : number) => {\r\n        const stateCopy = copyState();\r\n\r\n        const oldPosition = getLetterPosition(letterTile);\r\n        if( oldPosition === null ) return;\r\n\r\n        // update new pos\r\n        stateCopy.board[x][y].letter = letterTile.letter;\r\n        stateCopy.board[x][y].points = letterTile.points;\r\n        stateCopy.board[x][y].letterTile = letterTile;\r\n        // clear old pos\r\n        stateCopy.board[oldPosition.x][oldPosition.y].letter = undefined;\r\n        stateCopy.board[oldPosition.x][oldPosition.y].points = undefined;\r\n        stateCopy.board[oldPosition.x][oldPosition.y].letterTile = null;\r\n\r\n        await sendGameStateToBE(stateCopy);\r\n    };\r\n\r\n    const moveLetterFromBoardToHand = async (letterTile : LetterTile) => {\r\n        const stateCopy = copyState();\r\n\r\n        const oldPosition = getLetterPosition(letterTile);\r\n        if( oldPosition === null ) return;\r\n\r\n        // clear old pos\r\n        stateCopy.board[oldPosition.x][oldPosition.y].letter = undefined;\r\n        stateCopy.board[oldPosition.x][oldPosition.y].points = undefined;\r\n        stateCopy.board[oldPosition.x][oldPosition.y].letterTile = null;\r\n\r\n        stateCopy.playerHands[getCurrentPlayerName()].push(letterTile);\r\n        await sendGameStateToBE(stateCopy);\r\n    };\r\n\r\n    const updatePlayerPoints = async (playerName : string, newPoints : number) => {\r\n        const stateCopy = copyState();\r\n        stateCopy.playerPoints[playerName] = newPoints;\r\n        await sendGameStateToBE(stateCopy);\r\n    }\r\n\r\n    return {\r\n        gameState: gameState,\r\n        setGameState: setGameState,\r\n        fetchGameStateFromBe: fetchGameStateFromBe,\r\n        moveLetterToHandFromPouch: moveLetterToHandFromPouch,\r\n        sendGameStateToBE: sendGameStateToBE,\r\n        moveLetterFromHandToBoard,\r\n        togglePlayerTurn,\r\n        getPlayers,\r\n        moveLetterToPouchFromHand,\r\n        updatePlayerPoints,\r\n        moveLetterFromBoardToBoard,\r\n        moveLetterFromBoardToHand,\r\n        sendNewGameRequest\r\n    }\r\n}","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\util\\utils.ts",["88","89"],"import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { BE_URL } from \"../state\";\r\n\r\nexport const getCurrentPlayerName = (): string => {\r\n    return document.cookie;\r\n}\r\n\r\nexport const isMobileScreenWidth = () => window.innerWidth < 600;\r\n\r\nexport const isLoggedIn = () => {\r\n    if( document.cookie === '' )\r\n        return false;\r\n\r\n    axios.get(BE_URL+ \"/isLoggedIn?username=\"+document.cookie)\r\n        .then( (response) => {\r\n            if( response.status == 200 ) {\r\n                const data = response.data;\r\n                if(data.isLoggedIn)\r\n                    window.location.replace(\"game\");\r\n            }\r\n            \r\n        })\r\n        .catch((err) => {\r\n            toast(\"Failed to get login status from BE\", {\r\n                position: \"bottom-center\",\r\n                autoClose: 1000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n            });\r\n        });\r\n    \r\n    return false;\r\n}\r\n\r\nexport const login = (username: string) => {\r\n\r\n    axios.post(BE_URL + \"/login\", {\r\n        username: username,\r\n    }\r\n    ).then((response) => {\r\n\r\n        if (response.status == 200) {\r\n            document.cookie = username;\r\n            window.location.replace(\"game\");\r\n            return true;\r\n        }\r\n        else {\r\n            toast(\"Login failed!\", {\r\n                position: \"bottom-center\",\r\n                autoClose: 1000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n            });\r\n            document.cookie = '';\r\n        }\r\n    }).catch((err) => {\r\n        toast(\"Login failed!\", {\r\n            position: \"bottom-center\",\r\n            autoClose: 1000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: false,\r\n            draggable: false,\r\n        });\r\n        document.cookie = '';\r\n    });\r\n\r\n    return false;\r\n}","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\HandComponent.tsx",["90","91","92"],"import { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { LetterTile } from '../../../scrabble-backend/server';\r\nimport { LetterTileComponent, LetterTileTransferData } from './LetterTileComponent';\r\nimport { getCurrentPlayerName } from '../util/utils';\r\nimport { useCallback } from 'react';\r\nimport { TileDropType } from './BoardTileComponent';\r\n\r\nexport type HandComponentProps = {\r\n    letters: LetterTile[];\r\n    tileDropped : (tile : LetterTile, dropType : TileDropType,x: number, y: number) => void;\r\n    selectedLetterTile: LetterTile | undefined;\r\n    setSelectedLetterTile: React.Dispatch<React.SetStateAction<LetterTile | undefined>>;\r\n}\r\n\r\nexport const HandComponent = (props: HandComponentProps) => {\r\n\r\n    const [ letters, setLetters ] = useState<LetterTile[]>([]);\r\n\r\n    const setOrderedLetters = (newLetters : LetterTile[]) => {\r\n        const newLetterTiles = newLetters.filter( nl => letters.findIndex( letter => letter.id === nl.id ) === -1);\r\n        const missingLetterTiles = letters.filter( letter => newLetters.findIndex( nl => nl.id === letter.id) === -1 );\r\n\r\n        if( newLetterTiles.length === 0 && missingLetterTiles.length === 0 ) return;\r\n        const orderedLetterArray = [...letters];\r\n        missingLetterTiles.forEach( missingLetter => {\r\n            const idx = orderedLetterArray.findIndex( letter => letter.id === missingLetter.id);\r\n            orderedLetterArray.splice(idx,1);\r\n        });\r\n\r\n        newLetterTiles.forEach(newLetter => orderedLetterArray.push(newLetter));\r\n        setLetters(orderedLetterArray);\r\n    }\r\n\r\n    useEffect( () => {\r\n        setOrderedLetters(props.letters);\r\n    },[props.letters, setOrderedLetters])\r\n\r\n    const calculateLeftPos = (i) => {\r\n        const leftPosNumber = i * 40;\r\n        return \"\" + leftPosNumber;\r\n    }\r\n\r\n    const handleDragDrop = (e) => {\r\n        e.preventDefault();\r\n\r\n        const letterTransferData = JSON.parse(e.dataTransfer.getData(\"text/plain\")) as LetterTileTransferData;\r\n        const letterTile = letterTransferData.letterTile;\r\n        props.tileDropped(letterTile, TileDropType.BOARD_TO_HAND,-1,-1);\r\n    };\r\n\r\n    const handleLetterDrop = (letter : LetterTile, targetLetter : LetterTile) => {\r\n        \r\n        const movedLetterIdx = letters.findIndex( (propLetter => propLetter.id === letter.id));\r\n        const targetTileIdx = letters.findIndex( (propLetter) => propLetter.id === targetLetter.id );\r\n\r\n        if( movedLetterIdx < 0 || targetTileIdx < 0 ) return;\r\n\r\n        const handLettersCopy = [ ...letters];\r\n        const targetTile = handLettersCopy[targetTileIdx];\r\n        handLettersCopy[targetTileIdx] = handLettersCopy[movedLetterIdx];\r\n        handLettersCopy[movedLetterIdx] = targetTile;\r\n        setLetters(handLettersCopy)\r\n    }\r\n\r\n    const handleTileClicked = (targetLetter : LetterTile) => {\r\n        if( props.selectedLetterTile)\r\n            handleLetterDrop(props.selectedLetterTile,targetLetter);\r\n    }\r\n\r\n    const handleDragOver = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const handleClick = () => {\r\n        if( !props.selectedLetterTile ) return;\r\n\r\n        props.tileDropped(props.selectedLetterTile, TileDropType.BOARD_TO_HAND,-1,-1);\r\n    }\r\n\r\n    const isTileSelected = (letterId : number) => {\r\n        if( !props.selectedLetterTile ) return false;\r\n\r\n        return letterId === props.selectedLetterTile.id;\r\n    }\r\n\r\n    return (\r\n        <Div onClick={handleClick} onDragOver={handleDragOver} onDrop={handleDragDrop}>\r\n            {letters.map((letter, idx) => (\r\n                <LetterTileComponent \r\n                isSelected={isTileSelected(letter.id)} \r\n                setSelectedLetterTile={props.setSelectedLetterTile}\r\n                key={idx} isPlacedOnHand={true} \r\n                tileDropped = {handleLetterDrop} \r\n                tileClicked= {handleTileClicked}\r\n                letter={letter} \r\n                leftPos={calculateLeftPos(idx)}></LetterTileComponent>\r\n            ))}\r\n        </Div>\r\n    )\r\n}\r\n\r\nconst Div = styled.div`\r\n    margin-top: 10px;\r\n    height: 50px;\r\n    max-width: 500px;\r\n    background-color: #636a3f;\r\n    z-index: 10000;\r\n    padding-left: 8px;\r\n    padding-top: 2px;\r\n    padding-bottom: 2px;\r\n    border-radius: 6px;\r\n    border: 2px solid #686433;\r\n`;","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\PouchComponent.tsx",[],"C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\PlayerInfoComponent.tsx",["93"],"import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { isMobileScreenWidth } from '../util/utils';\r\n\r\nexport type PlayerInfoProps = {\r\n  pointsUpdated: (playerName: string, newPointValue: number) => void;\r\n  isActive: boolean,\r\n  name: string\r\n  points: number;\r\n  playerInfoClicked: (playerName: string) => void;\r\n  showBigControls?: boolean;\r\n  setOpenWndPlayerName?: React.Dispatch<React.SetStateAction<string | undefined>>\r\n}\r\n\r\nexport const PlayerInfo = (props: PlayerInfoProps) => {\r\n\r\n  const [points, setPoints] = useState(0);\r\n  const [newPoints, setNewPoints] = useState(0);\r\n\r\n  const mobile = isMobileScreenWidth();\r\n\r\n  useEffect(() => {\r\n    setPoints(props.points);\r\n  }, [props.points]);\r\n\r\n  const handlePointsChanged = (change: number) => {\r\n    setNewPoints(change + newPoints);\r\n    //props.pointsUpdated(props.name, points);\r\n  };\r\n\r\n  const handeAddPoints = () => {\r\n    props.pointsUpdated(props.name, points + newPoints);\r\n    setNewPoints(0);\r\n    if( props.setOpenWndPlayerName )\r\n      props.setOpenWndPlayerName(undefined);\r\n  };\r\n\r\n  const showControls = props.showBigControls || !mobile;\r\n  const showBigControls = props.showBigControls ? props.showBigControls : false;\r\n\r\n  const getNewPointsText = () => {\r\n    if( newPoints > 0 )\r\n      return '+'+newPoints;\r\n\r\n    return \"\"+newPoints\r\n  }\r\n\r\n  const getPointButtonComponent = (isPlusBtn: boolean) => {\r\n    const sign = isPlusBtn ? '+' : '-';\r\n\r\n    return showBigControls ? \r\n      <MobileButton mobileControls={showBigControls} onClick={() => handlePointsChanged(isPlusBtn ? 1 : -1)}>{sign}</MobileButton> :\r\n      <PointButton mobileControls={showBigControls} onClick={() => handlePointsChanged(isPlusBtn ? 1 : -1)}>{sign}</PointButton>\r\n  }\r\n\r\n  const getSendButton = () => {\r\n    if( showBigControls )\r\n      return <MobileSendPointsButton mobileControls={showBigControls} onClick={handeAddPoints} >Add</MobileSendPointsButton>      \r\n    else\r\n      return <SendPointsButton mobileControls={showBigControls} onClick={handeAddPoints} >Add</SendPointsButton>\r\n  }\r\n\r\n  return (\r\n    <FlexDivRow mobileControls={mobile} onClick={() => mobile && props.playerInfoClicked(props.name)}>\r\n      <PlayerContainer mobileControls={showBigControls}>\r\n        <PlayerNameDiv>{props.name}</PlayerNameDiv>\r\n        <div>{points + \"pts\"}</div>\r\n        {showBigControls && <NewPointsDiv mobileControls={showBigControls}>{getNewPointsText()}</NewPointsDiv>}\r\n      </PlayerContainer>\r\n      {showControls && (\r\n        <>\r\n          { !showBigControls && <NewPointsDiv mobileControls={showBigControls}>{getNewPointsText()}</NewPointsDiv> }\r\n          <FlexDivCol>\r\n            {getPointButtonComponent(true)}\r\n            {getPointButtonComponent(false)}\r\n          </FlexDivCol>\r\n          {getSendButton()}\r\n        </>\r\n      )}\r\n    </FlexDivRow>\r\n  )\r\n}\r\n\r\nconst SendPointsButton = styled.button`\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MobileSendPointsButton = styled.button`\r\nfont-weight: bold;\r\nwidth: 4rem;\r\nmargin-left: 1rem;\r\nbackground-color: #365050;\r\n      border-radius: 5px;\r\n      border-style: solid;\r\n      margin-top: 6px;\r\n      font-weight: bold;\r\n`;\r\n\r\nconst PlayerNameDiv = styled.div`\r\n  font-weight: bold;\r\n  text-decoration: underline;\r\n  color: #2e4289;\r\n`;\r\n\r\nconst NewPointsDiv = styled.div`\r\n    background-color: ${props => props.mobileControls ? '#96a9a9' : 'none'};\r\n    padding-top: 20px;\r\n    padding-left: 5px;\r\n    padding-right: 13px;\r\n    border: 1px;\r\n    width: ${props => props.mobileControls ? '2rem' : '10px'};\r\n    border-style: inset;\r\n    border-color: #eef1e3;\r\n    border-top-left-radius: 2px;\r\n    border-bottom-left-radius: 2px;\r\n    height: 37px;\r\n    margin-top: 2px;\r\n    border-style: inset;\r\n    text-align: center;\r\n    border-radius: 5px;\r\n    border: none;\r\n    padding-left: 11px;\r\n    font-weight: bold;\r\n    margin-right: ${props => props.mobileControls ? 'initial' : '12px'};\r\n`;\r\n\r\nconst PlayerContainer = styled.div`\r\n      padding: 10px;  \r\n      min-width: 57px;\r\n      padding-left: 15px;\r\n      display: flex;\r\n      flex-direction: column;\r\n      margin-right: ${props => props.mobileControls ? '0.5rem' : 'initial'};\r\n    & > div {\r\n      display: inline-block;\r\n    }\r\n    `;\r\n\r\nconst PointButton = styled.button`\r\n      height: 100%;\r\n    `;\r\n\r\nconst MobileButton = styled.button`\r\nwidth: 4rem;\r\nheight: 4rem;\r\nbackground-color: #365050;\r\n      border-radius: 5px;\r\n      border-style: solid;\r\n      margin-top: 6px;\r\n      font-weight: bold;\r\n      font-size: 22px;\r\n      font-family: fantasy;\r\n`\r\n\r\nconst FlexDivRow = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    padding: 10px;\r\n    border-top: ${props => props.mobileControls ? 'none' : '1px solid white'};\r\n    border-top-style: ${props => props.mobileControls ? 'none' : 'inset'};\r\n    `;\r\n\r\nconst FlexDivCol = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    `;","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\BoardTileComponent.tsx",["94","95","96","97","98","99","100","101","102","103","104","105"],"import { useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { LetterTile } from '../../../scrabble-backend/server';\r\nimport { isMobileScreenWidth } from '../util/utils';\r\nimport { LetterTileComponent, LetterTileTransferData } from './LetterTileComponent';\r\n\r\nexport const N0R = 0,\r\n    X2W = 1,\r\n    X3W = 2,\r\n    X2L = 3,\r\n    X3L = 4,\r\n    CNT = 5;\r\n\r\nexport enum TileDropType {\r\n    HAND_TO_POUCH = 1,\r\n    HAND_TO_BOARD = 2,\r\n    BOARD_TO_BOARD = 3,\r\n    BOARD_TO_HAND = 4,\r\n}\r\n\r\nexport type BoardTileComponentProps = {\r\n    tileDropped : (tile : LetterTile, dropType : TileDropType,x: number, y: number) => void,\r\n    tileType : number,\r\n    tileXPos : number,\r\n    tileYPos : number,\r\n    letterTile : LetterTile | undefined\r\n    selectedLetterTile: LetterTile | undefined;\r\n    setSelectedLetterTile: React.Dispatch<React.SetStateAction<LetterTile | undefined>>;\r\n};\r\n\r\nexport const BoardTileComponent = (props) => {\r\n\r\n    const isMobile = isMobileScreenWidth();\r\n    const mainDivRef = useRef<HTMLDivElement>(null);\r\n\r\n    const handleDragOver = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const gridElementContainsTileElement = (gridElement : HTMLElement) => {\r\n        const gridE = gridElement.classList.contains(\"grid-item\") ? gridElement : gridElement.parentElement;\r\n        return gridE && gridE.childElementCount > 1;\r\n    }\r\n\r\n    // Returns True if tile was dragged from a board tile to a board tile (as opposed to from hand onto the board)\r\n    const isOnBoardDrag = (letterTileEl : HTMLElement | null) => {\r\n        if( letterTileEl === null || letterTileEl.parentElement === null ) return false;\r\n        \r\n        return letterTileEl.parentElement.classList.contains(\"grid-item\");\r\n    }\r\n\r\n    const isDropAllowed = (dropTarget : HTMLElement) => {\r\n        \r\n        if( gridElementContainsTileElement(dropTarget) )\r\n            return false;\r\n\r\n        const targetBoardTile = dropTarget.childElementCount === 0 ? dropTarget.parentElement : dropTarget;\r\n        if( !targetBoardTile )\r\n            return false;\r\n\r\n        if( !targetBoardTile.classList.contains(\"grid-item\") && !targetBoardTile.classList.contains(\"letterTile\"))\r\n            return false;\r\n\r\n        return true;\r\n    };\r\n\r\n    const placeLetterTileOnBoard = (letterData : LetterTile, target : HTMLElement) => {\r\n\r\n        if( !isDropAllowed(target) ) return;\r\n\r\n        const letterTileElementId = \"letterTile_\"+letterData.id;\r\n        const letterTileEl = document.getElementById(letterTileElementId);\r\n        \r\n        // board tile to board tile\r\n        if( isOnBoardDrag(letterTileEl) ) {\r\n            props.tileDropped(letterData, TileDropType.BOARD_TO_BOARD, props.tileXPos, props.tileYPos);\r\n            return;\r\n        }\r\n\r\n        // Dropped on pouch\r\n        if( target.id === 'pouch' ) {\r\n            props.tileDropped(letterData, TileDropType.HAND_TO_POUCH);\r\n            return;\r\n        }\r\n\r\n        // Check if dropped on boardTile\r\n        if (!letterTileEl || !target.classList.contains(\"grid-item\"))\r\n            // check if dropped on special board tile (on the worddiv)\r\n            if( !letterTileEl || target.parentElement && !target.parentElement.classList.contains(\"grid-item\"))\r\n                return;\r\n\r\n        letterTileEl.style.left = \"\";\r\n\r\n        props.tileDropped(letterData, TileDropType.HAND_TO_BOARD, props.tileXPos, props.tileYPos);\r\n    }\r\n\r\n    const handleDragDrop = (e) => {\r\n        e.preventDefault();\r\n        \r\n        const letterTransferData = JSON.parse(e.dataTransfer.getData(\"text/plain\")) as LetterTileTransferData;\r\n        const letterData = letterTransferData.letterTile;\r\n\r\n        placeLetterTileOnBoard(letterData, e.target);\r\n    };\r\n\r\n    const getTileStyle = (tileType) => {\r\n\r\n        return {\r\n            fontSize: \"11px\",\r\n            background: getTileColorFromProps(tileType)\r\n        }\r\n    }\r\n\r\n    const getTileColorFromProps = (tileType) => {\r\n\r\n        if (tileType == X2W)\r\n            return \"#ffc0cbb5\";\r\n        else if (tileType == X3W)\r\n            return \"#ff0000a6\";\r\n        else if (tileType == X2L)\r\n            return \"#00ffffb3\";\r\n        else if (tileType == X3L)\r\n            return \"#4a4a91\";\r\n        else if (tileType == CNT)\r\n            return \"#ff000073\";\r\n\r\n        return \"\";\r\n    }\r\n\r\n    const getTileTextFromProps = (tileType) => {\r\n\r\n        if (tileType == X2W)\r\n            return isMobile ? \"2xW\" : \"2xWord\";\r\n        else if (tileType == X3W)\r\n            return isMobile ? \"3xW\" : \"3xWord\";\r\n        else if (tileType == X2L)\r\n            return isMobile ? \"2xL\" : \"2xLetter\";\r\n        else if (tileType == X3L)\r\n            return isMobile ? \"3xL\" : \"3xLetter\";\r\n\r\n        return \"\";\r\n    }\r\n\r\n    const isLetterTileSelected = () => {\r\n        if( !props.selectedLetterTile ) return false;\r\n\r\n        return props.selectedLetterTile.id === props.letterTile.id;\r\n    }\r\n\r\n    const getLetterTileFromProps = () => {\r\n        if( !props.letterTile )\r\n            return null;\r\n        \r\n        return (\r\n            <LetterTileComponent \r\n            isSelected={isLetterTileSelected()}\r\n            setSelectedLetterTile={props.setSelectedLetterTile}\r\n            isPlacedOnSpecialTile={ getTileTextFromProps(props.tileType) !== \"\" } \r\n            letter={props.letterTile} leftPos={\"0\"}></LetterTileComponent>\r\n        )\r\n    }\r\n\r\n    const handleBoardTileClicked = () => {\r\n        if( !props.selectedLetterTile || !mainDivRef.current ) return;\r\n\r\n        placeLetterTileOnBoard(props.selectedLetterTile, mainDivRef.current)\r\n    }\r\n\r\n    return (\r\n        <div className=\"grid-item\" \r\n        ref={mainDivRef}\r\n        onClick={handleBoardTileClicked}\r\n        onDragOver={handleDragOver} \r\n        onDrop={handleDragDrop} \r\n        style={getTileStyle(props.tileType)}>\r\n            <TileTextDiv\r\n                isMobile={isMobile}\r\n                isSpecialTile={props.tileType !== N0R}\r\n                onDragOver={handleDragOver} \r\n            >{getTileTextFromProps(props.tileType)}</TileTextDiv>\r\n            {getLetterTileFromProps()}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TileTextDiv = styled.div`\r\nfont-style: italic;\r\nfont-size: ${props => props.isMobile ? \"8px\" : \"10px\"};\r\nmargin-top: ${props => props.isMobile ? \"10px\" : \"10px\"};\r\ntext-align: center;\r\nposition: ${props => props.isMobile ? \"relative\" : \"initial\"};\r\nbottom: ${props => props.isMobile ? \"3px\" : \"initial\"};\r\n`;","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\state.ts",[],"C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\LetterTileComponent.tsx",["106","107"],"import { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { LetterTile } from '../../../scrabble-backend/server';\r\nimport { isMobileScreenWidth } from '../util/utils';\r\n\r\nexport type LetterTileTransferData = {\r\n    letterTile : LetterTile;\r\n    elementId : string;\r\n};\r\n\r\nexport type LetterProps = {\r\n    leftPos: string;\r\n    letter : LetterTile\r\n    tileDropped? : (letter : LetterTile, targetLetter : LetterTile) => void;\r\n    tileClicked? : (targetLetter : LetterTile) => void;\r\n    isPlacedOnSpecialTile? : boolean;\r\n    isPlacedOnHand? : boolean;\r\n    isSelected: boolean;\r\n    setSelectedLetterTile: React.Dispatch<React.SetStateAction<LetterTile | undefined>>;\r\n};\r\n\r\nconst getLetterTransferData = (letterTile : LetterTile, elementId : string ) => {\r\n    return {\r\n        letterTile : letterTile,\r\n        elementId : elementId\r\n    }\r\n};\r\n\r\nexport const LetterTileComponent = (props : LetterProps) => {\r\n\r\n    const isMobile = isMobileScreenWidth();\r\n    const elementId = \"letterTile_\"+props.letter.id;\r\n\r\n    const handleDragStart = (e) => {\r\n        e.dataTransfer.setData(\"text/plain\", JSON.stringify(getLetterTransferData(props.letter, elementId)));\r\n    }\r\n\r\n    const handleDragDrop = (e) => {\r\n        e.preventDefault();\r\n\r\n        const letterTransferData = JSON.parse(e.dataTransfer.getData(\"text/plain\")) as LetterTileTransferData;\r\n        const letterTile = letterTransferData.letterTile;\r\n\r\n        if( props.tileDropped ) \r\n            props.tileDropped(letterTile, props.letter);\r\n    }\r\n\r\n    const handleClick = () => {\r\n        if( !isMobile ) return;\r\n\r\n        if( props.tileClicked )\r\n            props.tileClicked(props.letter);\r\n\r\n        props.setSelectedLetterTile(props.isSelected ? undefined : props.letter);\r\n    }\r\n\r\n    const getTileStyle = () => {\r\n\r\n        const isSelectedStyle = props.isSelected ? ' letterTile-selected' : '';\r\n        const isMobileStyle = isMobile ? ' letterTile-onBoard-mobile' : '';\r\n        if( props.isPlacedOnSpecialTile )\r\n            return \"letterTile letterTileTopFix\"+isSelectedStyle+isMobileStyle;\r\n\r\n        if( props.isPlacedOnHand )\r\n            return \"letterTile letterTileOnHand\"+isSelectedStyle;\r\n        else \r\n            return \"letterTile\"+isSelectedStyle+isMobileStyle;\r\n    }\r\n\r\n    return (\r\n        <div onClick={handleClick} onDrop={handleDragDrop} onDragStart={ handleDragStart } draggable=\"true\" className={getTileStyle()} id={elementId}>\r\n            {props.letter.letter}\r\n            <div className=\"letterPoint\">\r\n                {props.letter.points}\r\n            </div>\r\n        </div>\r\n    );\r\n};","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\DialogComponent.tsx",[],"C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\ScrabbleLogo.tsx",[],"C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\PlayerInfoPopupComponent.tsx",["108","109"],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":6,"column":3,"nodeType":"116","messageId":"117","endLine":6,"endColumn":11},{"ruleId":"114","severity":1,"message":"118","line":11,"column":10,"nodeType":"116","messageId":"117","endLine":11,"endColumn":20},{"ruleId":"114","severity":1,"message":"119","line":14,"column":10,"nodeType":"116","messageId":"117","endLine":14,"endColumn":15},{"ruleId":"120","severity":1,"message":"121","line":27,"column":27,"nodeType":"122","messageId":"123","endLine":27,"endColumn":29},{"ruleId":"114","severity":1,"message":"124","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":25},{"ruleId":"114","severity":1,"message":"125","line":2,"column":8,"nodeType":"116","messageId":"117","endLine":2,"endColumn":14},{"ruleId":"114","severity":1,"message":"126","line":4,"column":10,"nodeType":"116","messageId":"117","endLine":4,"endColumn":20},{"ruleId":"120","severity":1,"message":"121","line":37,"column":27,"nodeType":"122","messageId":"123","endLine":37,"endColumn":29},{"ruleId":"127","severity":1,"message":"128","line":51,"column":8,"nodeType":"129","endLine":51,"endColumn":41,"suggestions":"130"},{"ruleId":"114","severity":1,"message":"131","line":60,"column":15,"nodeType":"116","messageId":"117","endLine":60,"endColumn":19},{"ruleId":"127","severity":1,"message":"132","line":98,"column":8,"nodeType":"129","endLine":98,"endColumn":28,"suggestions":"133"},{"ruleId":"120","severity":1,"message":"121","line":17,"column":33,"nodeType":"122","messageId":"123","endLine":17,"endColumn":35},{"ruleId":"120","severity":1,"message":"121","line":45,"column":29,"nodeType":"122","messageId":"123","endLine":45,"endColumn":31},{"ruleId":"114","severity":1,"message":"134","line":5,"column":10,"nodeType":"116","messageId":"117","endLine":5,"endColumn":30},{"ruleId":"114","severity":1,"message":"135","line":6,"column":10,"nodeType":"116","messageId":"117","endLine":6,"endColumn":21},{"ruleId":"127","severity":1,"message":"136","line":20,"column":11,"nodeType":"137","endLine":33,"endColumn":6},{"ruleId":"114","severity":1,"message":"135","line":3,"column":10,"nodeType":"116","messageId":"117","endLine":3,"endColumn":21},{"ruleId":"114","severity":1,"message":"138","line":1,"column":10,"nodeType":"116","messageId":"117","endLine":1,"endColumn":19},{"ruleId":"139","severity":1,"message":"140","line":89,"column":31,"nodeType":"141","messageId":"142","endLine":89,"endColumn":33},{"ruleId":"139","severity":1,"message":"140","line":89,"column":55,"nodeType":"141","messageId":"142","endLine":89,"endColumn":57},{"ruleId":"120","severity":1,"message":"121","line":116,"column":22,"nodeType":"122","messageId":"123","endLine":116,"endColumn":24},{"ruleId":"120","severity":1,"message":"121","line":118,"column":27,"nodeType":"122","messageId":"123","endLine":118,"endColumn":29},{"ruleId":"120","severity":1,"message":"121","line":120,"column":27,"nodeType":"122","messageId":"123","endLine":120,"endColumn":29},{"ruleId":"120","severity":1,"message":"121","line":122,"column":27,"nodeType":"122","messageId":"123","endLine":122,"endColumn":29},{"ruleId":"120","severity":1,"message":"121","line":124,"column":27,"nodeType":"122","messageId":"123","endLine":124,"endColumn":29},{"ruleId":"120","severity":1,"message":"121","line":132,"column":22,"nodeType":"122","messageId":"123","endLine":132,"endColumn":24},{"ruleId":"120","severity":1,"message":"121","line":134,"column":27,"nodeType":"122","messageId":"123","endLine":134,"endColumn":29},{"ruleId":"120","severity":1,"message":"121","line":136,"column":27,"nodeType":"122","messageId":"123","endLine":136,"endColumn":29},{"ruleId":"120","severity":1,"message":"121","line":138,"column":27,"nodeType":"122","messageId":"123","endLine":138,"endColumn":29},{"ruleId":"114","severity":1,"message":"138","line":1,"column":10,"nodeType":"116","messageId":"117","endLine":1,"endColumn":19},{"ruleId":"114","severity":1,"message":"125","line":2,"column":8,"nodeType":"116","messageId":"117","endLine":2,"endColumn":14},{"ruleId":"114","severity":1,"message":"138","line":1,"column":10,"nodeType":"116","messageId":"117","endLine":1,"endColumn":19},{"ruleId":"114","severity":1,"message":"143","line":1,"column":21,"nodeType":"116","messageId":"117","endLine":1,"endColumn":27},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'isLoggedIn' is defined but never used.","'toast' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'styled' is defined but never used.","'PlayerInfo' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'getCurrentPlayerName'. Either exclude it or remove the dependency array. Outer scope values like 'getCurrentPlayerName' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["146"],"'resp' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'getNextPlayer'. Either include it or remove the dependency array.",["147"],"'getCurrentPlayerName' is defined but never used.","'useCallback' is defined but never used.","The 'setOrderedLetters' function makes the dependencies of useEffect Hook (at line 37) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'setOrderedLetters' in its own useCallback() Hook.","VariableDeclarator","'useEffect' is defined but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'useRef' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},"Update the dependencies array to be: [gameState]",{"range":"152","text":"153"},"Update the dependencies array to be: [copyState, getNextPlayer]",{"range":"154","text":"155"},[2205,2238],"[gameState]",[3230,3250],"[copyState, getNextPlayer]"]