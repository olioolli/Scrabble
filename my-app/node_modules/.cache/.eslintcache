[{"C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\index.tsx":"1","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\reportWebVitals.ts":"2","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\App.tsx":"3","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\MainView.tsx":"4","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\GameBoardComponent.tsx":"5","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\util\\GameStateProvider.ts":"6","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\util\\utils.ts":"7","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\HandComponent.tsx":"8","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\PouchComponent.tsx":"9","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\PlayerInfoComponent.tsx":"10","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\BoardTileComponent.tsx":"11","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\state.ts":"12","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\LetterTileComponent.tsx":"13"},{"size":1324,"mtime":1647167906029,"results":"14","hashOfConfig":"15"},{"size":440,"mtime":1646850054889,"results":"16","hashOfConfig":"15"},{"size":2688,"mtime":1647104612401,"results":"17","hashOfConfig":"15"},{"size":309,"mtime":1646850054889,"results":"18","hashOfConfig":"15"},{"size":5229,"mtime":1646944782908,"results":"19","hashOfConfig":"15"},{"size":7048,"mtime":1647118920095,"results":"20","hashOfConfig":"15"},{"size":1979,"mtime":1647167145692,"results":"21","hashOfConfig":"15"},{"size":4178,"mtime":1646852237982,"results":"22","hashOfConfig":"15"},{"size":3626,"mtime":1646850054889,"results":"23","hashOfConfig":"15"},{"size":2517,"mtime":1646944768911,"results":"24","hashOfConfig":"15"},{"size":5068,"mtime":1646857187921,"results":"25","hashOfConfig":"15"},{"size":379,"mtime":1646851881614,"results":"26","hashOfConfig":"15"},{"size":1844,"mtime":1646850054889,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"w07eo",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},"C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\index.tsx",[],"C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\reportWebVitals.ts",[],["64","65"],"C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\App.tsx",["66","67","68","69","70"],"import './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport styled from 'styled-components';\r\nimport { MainView } from './components/MainView';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { isLoggedIn, login } from './util/utils';\r\nimport axios from 'axios';\r\nimport { BE_URL } from './state';\r\nimport { toast } from 'react-toastify';\r\n\r\nfunction App() {\r\n\r\n  const [isUserLoggedIn, setIsUserLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n\r\n    if (document.cookie === '')\r\n      setIsUserLoggedIn(false);\r\n\r\n    axios.get(BE_URL + \"/isLoggedIn?username=\" + document.cookie).then((response) => {\r\n      if (response.status == 200) {\r\n        const data = response.data;\r\n        console.log(\"IS logged in user: \"+document.cookie);\r\n        console.log(\"GOT RESP: \"+data.isLoggedIn);\r\n        setIsUserLoggedIn(data.isLoggedIn);\r\n      }\r\n      else\r\n        setIsUserLoggedIn(false);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/\">\r\n          {isUserLoggedIn ?\r\n            <MainView></MainView> :\r\n            <PlayerSelectView></PlayerSelectView>}\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n\r\n  );\r\n};\r\n\r\nconst PlayerSelectView = () => {\r\n  const usernameRef = useRef(null);\r\n\r\n  const logUserIn = () => {\r\n\r\n    if (!usernameRef || !usernameRef.current)\r\n      return;\r\n\r\n    const username = (usernameRef.current as HTMLInputElement).value;\r\n    if (username && username !== '') {\r\n      login(username)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PlayerSelectContainer>\r\n      <TitleText>Scrabble 5000</TitleText>\r\n      <TitleH2>Insert username</TitleH2>\r\n      <TextField ref={usernameRef} placeholder={\"Username\"}></TextField>\r\n      <Button onClick={() => logUserIn()}>Enter</Button>\r\n    </PlayerSelectContainer>\r\n  );\r\n\r\n}\r\n\r\nconst TitleH2 = styled.h2`\r\n  font-weight: normal;\r\n`;\r\n\r\nconst Button = styled.button`\r\npadding: 15px;\r\n    margin-top: 10px;\r\n    width: 150px;\r\n    border: 2px solid #386383;\r\n    border-radius: 3px;\r\n    background: #0e1d21;\r\n    color: white;\r\n    font-size: 16px;\r\n}\r\n`;\r\n\r\nconst TextField = styled.input`\r\nfont-size: 20px;\r\n    height: 20px;\r\n    padding: 20px;\r\n    border: 2px solid #386383;\r\n    border-radius: 3px;\r\n    background: #0e1d21;\r\n    color: white;\r\n`;\r\n\r\nconst TitleText = styled.p`\r\nfont-size: 60px;\r\ncolor: #386383;\r\n`;\r\n\r\nconst PlayerLink = styled.a`\r\n    font-size: 20px;\r\n`;\r\n\r\nconst PlayerSelectContainer = styled.div`\r\n    display: flex;\r\n    color: white;\r\n    flex-direction: column;\r\n    align-content: center;\r\n    align-items: center;\r\n    margin-top:10%;\r\n  `;\r\n\r\nexport default App;\r\n","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\MainView.tsx",["71","72","73"],"import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { GameBoardComponent } from './GameBoardComponent';\r\nimport { PlayerInfo } from './PlayerInfoComponent';\r\n\r\nexport const MainView = () => {\r\n    return (   \r\n      <GameBoardComponent></GameBoardComponent>\r\n    )\r\n}\r\n\r\n","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\GameBoardComponent.tsx",["74","75","76","77","78","79","80","81"],"import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { BoardTileComponent, TileDropType } from './BoardTileComponent';\r\nimport { HandComponent } from './HandComponent';\r\nimport { PouchComponent } from './PouchComponent';\r\nimport { BoardTile, GameState, LetterTile } from '../../../scrabble-backend/server';\r\nimport { getCurrentPlayerName } from '../util/utils';\r\nimport { useGameState } from '../util/GameStateProvider';\r\nimport { useCallback } from 'react';\r\nimport { PlayerInfo } from './PlayerInfoComponent';\r\n\r\nexport const GameBoardComponent = () => {\r\n\r\n    const { gameState, \r\n        moveLetterFromHandToBoard, \r\n        moveLetterToHandFromPouch, \r\n        getPlayers, \r\n        togglePlayerTurn, \r\n        moveLetterToPouchFromHand,\r\n        updatePlayerPoints,\r\n        moveLetterFromBoardToBoard,\r\n        moveLetterFromBoardToHand } = useGameState();\r\n\r\n    const handleLetterTileDrop = async (letterTile: LetterTile,dropType: TileDropType, x: number, y: number, newX?: number, newY?: number) => {\r\n        if (dropType === TileDropType.HAND_TO_POUCH )\r\n            await moveLetterToPouchFromHand(letterTile);\r\n        else if( dropType === TileDropType.HAND_TO_BOARD )\r\n            await moveLetterFromHandToBoard(letterTile, x, y);\r\n        else if( dropType == TileDropType.BOARD_TO_HAND )\r\n            await moveLetterFromBoardToHand(letterTile);\r\n        else\r\n            await moveLetterFromBoardToBoard(letterTile, x, y);\r\n    };\r\n\r\n    const handleEndTurnClicked = useCallback(async () => {\r\n        await togglePlayerTurn();\r\n    }, [togglePlayerTurn]);\r\n\r\n    const isCurrentPlayerActive = useCallback(() => {\r\n        return getCurrentPlayerName() === gameState.turnOfPlayer;\r\n    }, [gameState, getCurrentPlayerName]);\r\n\r\n    const handlePointsUpdated = async (playerName : string, newPoints : number) => {\r\n        await updatePlayerPoints(playerName, newPoints);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <MainDiv>\r\n                {\r\n                    isCurrentPlayerActive() ? <></> : <InactivePlayerBlocker>Not your turn</InactivePlayerBlocker>\r\n                }\r\n                <BoardComponent>\r\n                    {gameState.board.map((x, y) => (\r\n                        x.map((tile, i) => (\r\n                            <BoardTileComponent\r\n                                key={i}\r\n                                letterTile={ tile.letterTile }\r\n                                tileXPos={y}\r\n                                tileYPos={i}\r\n                                tileDropped={handleLetterTileDrop}\r\n                                tileType={tile.tileType}>\r\n                            </BoardTileComponent>))\r\n                    ))}\r\n                </BoardComponent>\r\n                <PlayerContainer>\r\n                {getPlayers().map(player => (\r\n                        <PlayerInfo isActive={gameState.turnOfPlayer === player} key={player} points={gameState.playerPoints[player]} name={player} pointsUpdated={handlePointsUpdated}></PlayerInfo>\r\n                    ))\r\n                }\r\n                <EndTurnButton onClick={handleEndTurnClicked} >End turn</EndTurnButton>\r\n                </PlayerContainer>\r\n                <BottomContainer>\r\n                    <HandComponent tileDropped={handleLetterTileDrop} letters={gameState.playerHands[getCurrentPlayerName()] !== undefined ? gameState.playerHands[getCurrentPlayerName()] : []} />\r\n                    <PouchComponent\r\n                        letters={gameState.pouchLetters !== undefined ? gameState.pouchLetters : []}\r\n                        moveLetterToHandFromPouch={moveLetterToHandFromPouch}\r\n                        tileDropped= {handleLetterTileDrop}\r\n                    />\r\n                </BottomContainer>\r\n            </MainDiv>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst PlayerContainer = styled.div`\r\n    position: absolute;\r\n    right: 10%;\r\n    top: 1px;\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    flex-direction: column;\r\n    border: 1px solid #ffffff;\r\n    padding: 5px;\r\n    margin-top: 10px;\r\n    border-radius: 4px;\r\n    background: #636a3f;\r\n    `;\r\n\r\nconst EndTurnButton = styled.button`\r\nwidth: 100px;\r\npadding: 5px;\r\nheight: 50px;\r\nbackground: #eef1e3;\r\nborder-radius: 4px;\r\nmargin-top: 10px;\r\npadding: 10px;\r\n    margin-left: 10px;\r\n    font-weight: bold;\r\n    background-color: #eef1e3;\r\n`;\r\n\r\nconst MainDiv = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\nalign-items: center;\r\n`;\r\n\r\nconst InactivePlayerBlocker = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 10000;\r\n  background: #762f2f;\r\n  position: absolute;\r\n  top: 0px;\r\n  left: 0px;\r\n  opacity: 0.6;\r\n`;\r\n\r\nconst MainContainer = styled.div`\r\n\tdispaly: flex;\r\n`;\r\n\r\nconst BottomContainer = styled.div`\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n    margin-top: 10px;\r\n`;\r\n\r\nconst BoardComponent = styled.div`\r\ndisplay: grid;\r\n    grid-template-columns: auto auto auto auto auto auto auto auto auto auto auto auto auto auto auto;\r\n    background-color: #2e4289;\r\n    padding: 2px;\r\n    width: 718px;\r\n    margin: auto;\r\n    margin-top: 5px;\r\n    padding: 8px;\r\n    padding-right: 8px;\r\n    border-radius: 3px;\r\n`;","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\util\\GameStateProvider.ts",["82"],"import axios from \"axios\";\r\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { BoardTile, GameState, LetterTile } from \"../../../scrabble-backend/server\";\r\nimport { BE_URL, BE_WS_URL } from \"../state\";\r\nimport { getCurrentPlayerName } from \"./utils\";\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\n\r\nconst initialGameState = {\r\n    playerPoints: {},\r\n    turnOfPlayer: \"\",\r\n    pouchLetters: [],\r\n    board: [],\r\n    playerHands: {}\r\n}\r\n\r\nexport const useGameState = () => {\r\n\r\n    const players = useMemo( () => [\"Player1\", \"Player2\"],[]); // TODO: move to backend\r\n\r\n    const [gameState, setGameState] = useState<GameState>(initialGameState);\r\n\r\n    const copyState = useCallback( (): GameState => {\r\n\r\n        const playerPoints = {};\r\n        const turnOfPlayer = \"\" + gameState.turnOfPlayer;\r\n        const pouchLetters = [...gameState.pouchLetters];\r\n        const board: BoardTile[][] = [];\r\n        const playerHands: Record<string, LetterTile[]> = {};\r\n\r\n        for(let playerName in gameState.playerPoints )\r\n            playerPoints[playerName] = gameState.playerPoints[playerName];\r\n\r\n        for (let i = 0; i < gameState.board.length; i++)\r\n            board[i] = gameState.board[i].slice();\r\n\r\n        for (let i in gameState.playerHands)\r\n            playerHands[i] = gameState.playerHands[i].slice();\r\n\r\n        return {\r\n            playerPoints,\r\n            turnOfPlayer,\r\n            pouchLetters,\r\n            board,\r\n            playerHands\r\n        }\r\n    },[gameState]);\r\n\r\n    const fetchGameStateFromBe = useCallback(() => {\r\n        axios.get(BE_URL + \"/game\").then((resp) => {\r\n            setGameState(resp.data);\r\n        })\r\n    }, []);\r\n\r\n    const sendGameStateToBE = async (state: GameState) => {\r\n        const resp = await axios.post(BE_URL + \"/game\", { game: state });\r\n        setGameState(resp.data);\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        let client = new W3CWebSocket(BE_WS_URL);\r\n\r\n        client.onopen = () => {};\r\n\r\n        client.onmessage = (message) => {\r\n\r\n            const newGameState = JSON.parse(message.data as string);\r\n            if (newGameState)\r\n                setGameState(newGameState);\r\n        };\r\n\r\n        fetchGameStateFromBe();\r\n    }, [fetchGameStateFromBe]);\r\n\r\n    const getPlayers = (): string[] => Object.keys(gameState.playerHands);\r\n\r\n    const togglePlayerTurn = useCallback(async () => {\r\n        const gameStateCopy = copyState();\r\n        const nextPlayer = getNextPlayer();\r\n        gameStateCopy.turnOfPlayer = nextPlayer;\r\n        await sendGameStateToBE(gameStateCopy);\r\n    }, [copyState, players]);\r\n\r\n    const getNextPlayer = () => {\r\n        const players = getPlayers();\r\n        let currentPlayerIdx = players.findIndex( (player) => player === gameState.turnOfPlayer );\r\n        currentPlayerIdx++;\r\n        if( currentPlayerIdx >= players.length )\r\n            currentPlayerIdx = 0;\r\n        return players[currentPlayerIdx];\r\n    }\r\n\r\n    const moveLetterToPouchFromHand = async (letter: LetterTile) => {\r\n        const gameStateCopy = copyState();\r\n\r\n        const idx = gameStateCopy.playerHands[getCurrentPlayerName()].findIndex(l => l.id === letter.id);\r\n        gameStateCopy.playerHands[getCurrentPlayerName()].splice(idx, 1);\r\n        gameStateCopy.pouchLetters.push(letter);\r\n        await sendGameStateToBE(gameStateCopy);\r\n    };\r\n\r\n    const moveLetterToHandFromPouch = async (letter: LetterTile) => {\r\n        const idx = gameState.pouchLetters.findIndex((pouchLetter) => pouchLetter.id === letter.id);\r\n        if (idx === -1) return;\r\n\r\n        const gameStateCopy = copyState();\r\n\r\n        gameStateCopy.pouchLetters.splice(idx, 1);\r\n        gameStateCopy.playerHands[getCurrentPlayerName()].push(letter);\r\n\r\n        await sendGameStateToBE(gameStateCopy);\r\n    }\r\n\r\n    const removeTileFromPlayerHand = (hand: LetterTile[], letterTile: LetterTile) => {\r\n        if (!hand || hand.length === 0) return;\r\n\r\n        const tileIdx = hand.findIndex((tile, idx) => tile.id === letterTile.id);\r\n        if (tileIdx === -1) return;\r\n\r\n        hand.splice(tileIdx, 1);\r\n    }\r\n\r\n    const moveLetterFromHandToBoard = async (letterTile: LetterTile, x: number, y: number) => {\r\n        const stateCopy = copyState();\r\n\r\n        // update board\r\n        stateCopy.board[x][y].letter = letterTile.letter;\r\n        stateCopy.board[x][y].points = letterTile.points;\r\n        stateCopy.board[x][y].letterTile = letterTile;\r\n\r\n        //update hand\r\n        removeTileFromPlayerHand(stateCopy.playerHands[getCurrentPlayerName()], letterTile);\r\n\r\n        await sendGameStateToBE(stateCopy);\r\n    }\r\n\r\n    const getLetterPosition = (letterTile : LetterTile) => {\r\n        for(let i = 0; i < gameState.board.length; i++) \r\n            for(let j = 0; j < gameState.board.length; j++)\r\n                if( gameState.board[i][j].letterTile?.id === letterTile.id )\r\n                    return { x: i, y: j };\r\n\r\n        return null;\r\n    };\r\n\r\n    const moveLetterFromBoardToBoard = async (letterTile : LetterTile, x : number, y : number) => {\r\n        const stateCopy = copyState();\r\n\r\n        const oldPosition = getLetterPosition(letterTile);\r\n        if( oldPosition === null ) return;\r\n\r\n        // update new pos\r\n        stateCopy.board[x][y].letter = letterTile.letter;\r\n        stateCopy.board[x][y].points = letterTile.points;\r\n        stateCopy.board[x][y].letterTile = letterTile;\r\n        // clear old pos\r\n        stateCopy.board[oldPosition.x][oldPosition.y].letter = undefined;\r\n        stateCopy.board[oldPosition.x][oldPosition.y].points = undefined;\r\n        stateCopy.board[oldPosition.x][oldPosition.y].letterTile = null;\r\n\r\n        await sendGameStateToBE(stateCopy);\r\n    };\r\n\r\n    const moveLetterFromBoardToHand = async (letterTile : LetterTile) => {\r\n        const stateCopy = copyState();\r\n\r\n        const oldPosition = getLetterPosition(letterTile);\r\n        if( oldPosition === null ) return;\r\n\r\n        // clear old pos\r\n        stateCopy.board[oldPosition.x][oldPosition.y].letter = undefined;\r\n        stateCopy.board[oldPosition.x][oldPosition.y].points = undefined;\r\n        stateCopy.board[oldPosition.x][oldPosition.y].letterTile = null;\r\n\r\n        stateCopy.playerHands[getCurrentPlayerName()].push(letterTile);\r\n        await sendGameStateToBE(stateCopy);\r\n    };\r\n\r\n    const updatePlayerPoints = async (playerName : string, newPoints : number) => {\r\n        const stateCopy = copyState();\r\n        stateCopy.playerPoints[playerName] = newPoints;\r\n        await sendGameStateToBE(stateCopy);\r\n    }\r\n\r\n    return {\r\n        gameState: gameState,\r\n        setGameState: setGameState,\r\n        fetchGameStateFromBe: fetchGameStateFromBe,\r\n        moveLetterToHandFromPouch: moveLetterToHandFromPouch,\r\n        sendGameStateToBE: sendGameStateToBE,\r\n        moveLetterFromHandToBoard,\r\n        togglePlayerTurn,\r\n        getPlayers,\r\n        moveLetterToPouchFromHand,\r\n        updatePlayerPoints,\r\n        moveLetterFromBoardToBoard,\r\n        moveLetterFromBoardToHand\r\n    }\r\n}","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\util\\utils.ts",["83","84"],"import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { BE_URL } from \"../state\";\r\n\r\nexport const getCurrentPlayerName = (): string => {\r\n    return document.cookie;\r\n}\r\n\r\nexport const isLoggedIn = () => {\r\n    if( document.cookie === '' )\r\n        return false;\r\n\r\n    axios.get(BE_URL+ \"/isLoggedIn?username=\"+document.cookie)\r\n        .then( (response) => {\r\n            if( response.status == 200 ) {\r\n                const data = response.data;\r\n                if(data.isLoggedIn)\r\n                    window.location.replace(\"game\");\r\n            }\r\n            \r\n        })\r\n        .catch((err) => {\r\n            toast(\"Failed to get login status from BE\", {\r\n                position: \"bottom-center\",\r\n                autoClose: 1000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n            });\r\n        });\r\n    \r\n    return false;\r\n}\r\n\r\nexport const login = (username: string) => {\r\n\r\n    axios.post(BE_URL + \"/login\", {\r\n        username: username,\r\n    }\r\n    ).then((response) => {\r\n\r\n        if (response.status == 200) {\r\n            document.cookie = username;\r\n            window.location.replace(\"game\");\r\n            return true;\r\n        }\r\n        else {\r\n            toast(\"Login failed!\", {\r\n                position: \"bottom-center\",\r\n                autoClose: 1000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n            });\r\n            document.cookie = '';\r\n        }\r\n    }).catch((err) => {\r\n        toast(\"Login failed!\", {\r\n            position: \"bottom-center\",\r\n            autoClose: 1000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: false,\r\n            draggable: false,\r\n        });\r\n        document.cookie = '';\r\n    });\r\n\r\n    return false;\r\n}","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\HandComponent.tsx",["85","86","87","88"],"import { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { LetterTile } from '../../../scrabble-backend/server';\r\nimport { LetterTileComponent, LetterTileTransferData } from './LetterTileComponent';\r\nimport { getCurrentPlayerName } from '../util/utils';\r\nimport { useCallback } from 'react';\r\nimport { TileDropType } from './BoardTileComponent';\r\n\r\nexport type HandComponentProps = {\r\n    letters: LetterTile[];\r\n    tileDropped : (tile : LetterTile, dropType : TileDropType,x: number, y: number) => void;\r\n}\r\n\r\nexport const HandComponent = (props: HandComponentProps) => {\r\n\r\n    const [ letters, setLetters ] = useState<LetterTile[]>([]);\r\n\r\n    const setOrderedLetters = (newLetters : LetterTile[]) => {\r\n        const newLetterTiles = newLetters.filter( nl => letters.findIndex( letter => letter.id === nl.id ) === -1);\r\n        const missingLetterTiles = letters.filter( letter => newLetters.findIndex( nl => nl.id === letter.id) === -1 );\r\n\r\n        if( newLetterTiles.length === 0 && missingLetterTiles.length === 0 ) return;\r\n        const orderedLetterArray = [...letters];\r\n        missingLetterTiles.forEach( missingLetter => {\r\n            const idx = orderedLetterArray.findIndex( letter => letter.id === missingLetter.id);\r\n            orderedLetterArray.splice(idx,1);\r\n        });\r\n\r\n        newLetterTiles.forEach(newLetter => orderedLetterArray.push(newLetter));\r\n        setLetters(orderedLetterArray);\r\n    }\r\n\r\n    useEffect( () => {\r\n        //setLetterOrder(props.letters);\r\n        //setLetters(props.letters);\r\n        setOrderedLetters(props.letters);\r\n    },[props.letters, setOrderedLetters])\r\n\r\n    const calculateLeftPos = (i) => {\r\n        const leftPosNumber = i * 40;\r\n        return \"\" + leftPosNumber;\r\n    }\r\n\r\n    const setLetterOrder = useCallback((letterTiles : LetterTile[]) => {\r\n        if( !letters ) return;\r\n\r\n        for(let i = 0; i < letterTiles.length; i++) {\r\n            const orderedIdx = letters.findIndex( l => l.id === letterTiles[i].id );\r\n            if( orderedIdx > -1 && i !== orderedIdx ) {\r\n                const temp = letterTiles[orderedIdx];\r\n                letterTiles[orderedIdx] = letters[i];\r\n                const tempIdx = letters.findIndex( ( stateLetter => stateLetter.id === temp.id ));\r\n                if( tempIdx > -1 )\r\n                    letterTiles[tempIdx] = temp;\r\n            }\r\n        }\r\n    },[letters]);\r\n\r\n    const handleDragDrop = (e) => {\r\n        e.preventDefault();\r\n\r\n        const letterTransferData = JSON.parse(e.dataTransfer.getData(\"text/plain\")) as LetterTileTransferData;\r\n        const letterTileEl = document.getElementById(letterTransferData.elementId);\r\n        const letterTile = letterTransferData.letterTile;\r\n        props.tileDropped(letterTile, TileDropType.BOARD_TO_HAND,-1,-1);\r\n    };\r\n\r\n    const handleLetterDrop = (letter : LetterTile, targetLetter : LetterTile) => {\r\n        \r\n        const movedLetterIdx = letters.findIndex( (propLetter => propLetter.id === letter.id));\r\n        const targetTileIdx = letters.findIndex( (propLetter) => propLetter.id === targetLetter.id );\r\n\r\n        if( movedLetterIdx < 0 || targetTileIdx < 0 ) return;\r\n\r\n        const handLettersCopy = [ ...letters];\r\n        const targetTile = handLettersCopy[targetTileIdx];\r\n        handLettersCopy[targetTileIdx] = handLettersCopy[movedLetterIdx];\r\n        handLettersCopy[movedLetterIdx] = targetTile;\r\n        setLetters(handLettersCopy)\r\n    }\r\n\r\n    const handleDragOver = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <Div onDragOver={handleDragOver} onDrop={handleDragDrop}>\r\n            {letters.map((letter, idx) => (\r\n                <LetterTileComponent key={idx} isPlacedOnHand={true} tileDropped = {handleLetterDrop} letter={letter} leftPos={calculateLeftPos(idx)}></LetterTileComponent>\r\n            ))}\r\n        </Div>\r\n    )\r\n}\r\n\r\nconst Div = styled.div`\r\n    margin-top: 10px;\r\n    height: 50px;\r\n    width: 500px;\r\n    background-color: #636a3f;\r\n    z-index: 10000;\r\n    padding-left: 8px;\r\n    padding-top: 2px;\r\n    padding-bottom: 2px;\r\n    border-radius: 6px;\r\n    border: 2px solid #686433;\r\n`;","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\PouchComponent.tsx",[],"C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\PlayerInfoComponent.tsx",["89"],"import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport type PlayerInfoProps = {\r\n  pointsUpdated: (playerName: string, newPointValue: number) => void;\r\n  isActive: boolean,\r\n  name: string\r\n  points: number;\r\n}\r\n\r\nexport const PlayerInfo = (props: PlayerInfoProps) => {\r\n\r\n  const [points, setPoints] = useState(0);\r\n  const [newPoints, setNewPoints] = useState(0);\r\n\r\n  useEffect( () => {\r\n    setPoints(props.points);\r\n  },[props.points]);\r\n\r\n  const handlePointsChanged = (change: number) => {\r\n    setNewPoints(change + newPoints);\r\n    //props.pointsUpdated(props.name, points);\r\n  };\r\n\r\n  const handeAddPoints = () => {\r\n    props.pointsUpdated(props.name, points + newPoints);\r\n    setNewPoints(0);\r\n  };\r\n\r\n  return (\r\n    <FlexDivRow>\r\n      <PlayerContainer>\r\n        <PlayerNameDiv>{props.name}</PlayerNameDiv>\r\n        <div>{points + \"pts\"}</div>\r\n      </PlayerContainer>\r\n      <NewPointsDiv>{newPoints}</NewPointsDiv>\r\n      <FlexDivCol>\r\n        <PointButton onClick={() => handlePointsChanged(1)}>+</PointButton>\r\n        <PointButton onClick={() => handlePointsChanged(-1)}>-</PointButton>\r\n      </FlexDivCol>\r\n      <SendPointsButton onClick={handeAddPoints} >Add</SendPointsButton>\r\n    </FlexDivRow>\r\n  )\r\n}\r\n\r\nconst SendPointsButton = styled.button`\r\n  font-weight: bold;\r\n`;\r\n\r\nconst PlayerNameDiv = styled.div`\r\n  font-weight: bold;\r\n  text-decoration: underline;\r\n  color: #2e4289;\r\n`;\r\n\r\nconst NewPointsDiv = styled.div`\r\nbackground-color: #636a3f;\r\n    padding-top: 20px;\r\n    padding-left: 5px;\r\n    padding-right: 13px;\r\n    border: 1px;\r\n    width: 10px;\r\n    border-style: inset;\r\n    border-color: #eef1e3;\r\n    border-top-left-radius: 2px;\r\n    border-bottom-left-radius: 2px;\r\n    height: 37px;\r\n    margin-top: 2px;\r\n    border-style: inset;\r\n`;\r\n\r\nconst PlayerContainer = styled.div`\r\n      padding: 10px;  \r\n      min-width: 57px;\r\n      padding-left: 15px;\r\n      display: flex;\r\n      flex-direction: column;\r\n      background-color: #636a3f;\r\n    & > div {\r\n      display: inline-block;\r\n    }\r\n    `;\r\n\r\nconst PointButton = styled.button`\r\n      height: 100%;\r\n      background-color: #eef1e3;\r\n    `;\r\n\r\nconst FlexDivRow = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    padding: 10px;\r\n    border-top: 1px solid white;\r\n    border-top-style: inset;\r\n    `;\r\n\r\nconst FlexDivCol = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    `;","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\BoardTileComponent.tsx",["90","91","92","93","94","95","96","97","98","99","100","101","102","103"],"import { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { LetterTile } from '../../../scrabble-backend/server';\r\nimport { LetterTileComponent, LetterTileTransferData } from './LetterTileComponent';\r\n\r\nexport const N0R = 0,\r\n    X2W = 1,\r\n    X3W = 2,\r\n    X2L = 3,\r\n    X3L = 4,\r\n    CNT = 5;\r\n\r\nexport enum TileDropType {\r\n    HAND_TO_POUCH = 1,\r\n    HAND_TO_BOARD = 2,\r\n    BOARD_TO_BOARD = 3,\r\n    BOARD_TO_HAND = 4,\r\n}\r\n\r\nexport type BoardTileComponentProps = {\r\n    tileDropped : (tile : LetterTile, dropType : TileDropType,x: number, y: number) => void,\r\n    tileType : number,\r\n    tileXPos : number,\r\n    tileYPos : number,\r\n    letterTile : LetterTile | undefined\r\n};\r\n\r\nexport const BoardTileComponent = (props) => {\r\n\r\n    const handleDragOver = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const gridElementContainsTileElement = (gridElement : HTMLElement) => {\r\n        const gridE = gridElement.classList.contains(\"grid-item\") ? gridElement : gridElement.parentElement;\r\n        return gridE && gridE.childElementCount > 1;\r\n    }\r\n\r\n    // Returns True if tile was dragged from a board tile to a board tile (as opposed to from hand onto the board)\r\n    const isOnBoardDrag = (letterTileEl : HTMLElement | null) => {\r\n        if( letterTileEl === null || letterTileEl.parentElement === null ) return false;\r\n        \r\n        return letterTileEl.parentElement.classList.contains(\"grid-item\");\r\n    }\r\n\r\n    const isDropAllowed = (dropTarget : HTMLElement) => {\r\n        \r\n        if( gridElementContainsTileElement(dropTarget) )\r\n            return false;\r\n\r\n        const targetBoardTile = dropTarget.childElementCount === 0 ? dropTarget.parentElement : dropTarget;\r\n        if( !targetBoardTile )\r\n            return false;\r\n\r\n        if( !targetBoardTile.classList.contains(\"grid-item\") && !targetBoardTile.classList.contains(\"letterTile\"))\r\n            return false;\r\n\r\n        return true;\r\n    };\r\n\r\n    const handleDragDrop = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( !isDropAllowed(e.target) ) return;\r\n\r\n        const letterTransferData = JSON.parse(e.dataTransfer.getData(\"text/plain\")) as LetterTileTransferData;\r\n        const letterTileEl = document.getElementById(letterTransferData.elementId);\r\n        const letterData = letterTransferData.letterTile;\r\n\r\n        // board tile to board tile\r\n        if( isOnBoardDrag(letterTileEl) ) {\r\n            props.tileDropped(letterData, TileDropType.BOARD_TO_BOARD, props.tileXPos, props.tileYPos);\r\n            return;\r\n        }\r\n\r\n        // Dropped on pouch\r\n        if( e.target.id === 'pouch' ) {\r\n            props.tileDropped(letterData, TileDropType.HAND_TO_POUCH);\r\n            return;\r\n        }\r\n\r\n\r\n        // Check if dropped on boardTile\r\n        if (!letterTileEl || !e.target.classList.contains(\"grid-item\"))\r\n            // check if dropped on special board tile (on the worddiv)\r\n            if( !letterTileEl || e.target.parentElement && !e.target.parentElement.classList.contains(\"grid-item\"))\r\n                return;\r\n\r\n        letterTileEl.style.left = \"\";\r\n        \r\n        const letter = letterTileEl.innerText.charAt(0);\r\n        const points = parseInt(letterTileEl.children[0].innerHTML);\r\n\r\n        props.tileDropped(letterData, TileDropType.HAND_TO_BOARD, props.tileXPos, props.tileYPos);\r\n    };\r\n\r\n    const getTileStyle = (tileType) => {\r\n\r\n        return {\r\n            fontSize: \"11px\",\r\n            background: getTileColorFromProps(tileType)\r\n        }\r\n    }\r\n\r\n    const getTileColorFromProps = (tileType) => {\r\n\r\n        if (tileType == X2W)\r\n            return \"#ffc0cbb5\";\r\n        else if (tileType == X3W)\r\n            return \"#ff0000a6\";\r\n        else if (tileType == X2L)\r\n            return \"#00ffffb3\";\r\n        else if (tileType == X3L)\r\n            return \"#4a4a91\";\r\n        else if (tileType == CNT)\r\n            return \"#ff000073\";\r\n\r\n        return \"\";\r\n    }\r\n\r\n    const getTileTextFromProps = (tileType) => {\r\n\r\n        if (tileType == X2W)\r\n            return \"2xWord\";\r\n        else if (tileType == X3W)\r\n            return \"3xWord\";\r\n        else if (tileType == X2L)\r\n            return \"2xLetter\";\r\n        else if (tileType == X3L)\r\n            return \"3xLetter\";\r\n\r\n        return \"\";\r\n    }\r\n\r\n    const getLetterTileFromProps = () => {\r\n        if( !props.letterTile )\r\n            return null;\r\n        \r\n        return (\r\n            <LetterTileComponent isPlacedOnSpecialTile={ getTileTextFromProps(props.tileType) !== \"\" } letter={props.letterTile} leftPos={\"0\"}></LetterTileComponent>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"grid-item\" \r\n        onDragOver={handleDragOver} \r\n        onDrop={handleDragDrop} \r\n        style={getTileStyle(props.tileType)}>\r\n            <TileTextDiv\r\n                onDragOver={handleDragOver} \r\n            >{getTileTextFromProps(props.tileType)}</TileTextDiv>\r\n            {getLetterTileFromProps()}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TileTextDiv = styled.div`\r\nmargin-top: 10px;\r\nfont-style: italic;\r\nfont-size: 10px;\r\n`;","C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\state.ts",[],"C:\\Users\\ollih\\OneDrive\\Tiedostot\\Scrabble\\Scrabble\\my-app\\src\\components\\LetterTileComponent.tsx",["104","105","106","107"],"import { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { LetterTile } from '../../../scrabble-backend/server';\r\n\r\nexport type LetterTileTransferData = {\r\n    letterTile : LetterTile;\r\n    elementId : string;\r\n};\r\n\r\nexport type LetterProps = {\r\n    leftPos: string;\r\n    letter : LetterTile\r\n    tileDropped? : (letter : LetterTile, targetLetter : LetterTile) => void;\r\n    isPlacedOnSpecialTile? : boolean;\r\n    isPlacedOnHand? : boolean;\r\n};\r\n\r\nconst getLetterTransferData = (letterTile : LetterTile, elementId : string ) => {\r\n    return {\r\n        letterTile : letterTile,\r\n        elementId : elementId\r\n    }\r\n};\r\n\r\nlet idCounter = 0;\r\n\r\nexport const LetterTileComponent = (props : LetterProps) => {\r\n\r\n    const id = idCounter++;\r\n    const elementId = \"letterTile_\"+props.letter.id;\r\n\r\n    const style = {\r\n        left: props.leftPos+\"px\"\r\n    }\r\n\r\n    const handleDragStart = (e) => {\r\n        e.dataTransfer.setData(\"text/plain\", JSON.stringify(getLetterTransferData(props.letter, elementId)));\r\n    }\r\n\r\n    const handleDragDrop = (e) => {\r\n        e.preventDefault();\r\n\r\n        const letterTransferData = JSON.parse(e.dataTransfer.getData(\"text/plain\")) as LetterTileTransferData;\r\n        const letterTile = letterTransferData.letterTile;\r\n\r\n        if( props.tileDropped ) \r\n            props.tileDropped(letterTile, props.letter);\r\n    }\r\n\r\n    const tileStyle = props.isPlacedOnSpecialTile ? \"letterTile letterTileTopFix\" : props.isPlacedOnHand ? \"letterTile letterTileOnHand\" : \"letterTile\";\r\n\r\n    return (\r\n        <div onDrop={handleDragDrop} onDragStart={ handleDragStart } draggable=\"true\" className={tileStyle} id={elementId}>\r\n            {props.letter.letter}\r\n            <div className=\"letterPoint\">\r\n                {props.letter.points}\r\n            </div>\r\n        </div>\r\n    );\r\n};",{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":6,"column":3,"nodeType":"114","messageId":"115","endLine":6,"endColumn":11},{"ruleId":"112","severity":1,"message":"116","line":11,"column":10,"nodeType":"114","messageId":"115","endLine":11,"endColumn":20},{"ruleId":"112","severity":1,"message":"117","line":14,"column":10,"nodeType":"114","messageId":"115","endLine":14,"endColumn":15},{"ruleId":"118","severity":1,"message":"119","line":26,"column":27,"nodeType":"120","messageId":"121","endLine":26,"endColumn":29},{"ruleId":"112","severity":1,"message":"122","line":107,"column":7,"nodeType":"114","messageId":"115","endLine":107,"endColumn":17},{"ruleId":"112","severity":1,"message":"123","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":25},{"ruleId":"112","severity":1,"message":"124","line":2,"column":8,"nodeType":"114","messageId":"115","endLine":2,"endColumn":14},{"ruleId":"112","severity":1,"message":"125","line":4,"column":10,"nodeType":"114","messageId":"115","endLine":4,"endColumn":20},{"ruleId":"112","severity":1,"message":"126","line":1,"column":8,"nodeType":"114","messageId":"115","endLine":1,"endColumn":13},{"ruleId":"112","severity":1,"message":"127","line":2,"column":10,"nodeType":"114","messageId":"115","endLine":2,"endColumn":19},{"ruleId":"112","severity":1,"message":"123","line":2,"column":21,"nodeType":"114","messageId":"115","endLine":2,"endColumn":29},{"ruleId":"112","severity":1,"message":"128","line":7,"column":10,"nodeType":"114","messageId":"115","endLine":7,"endColumn":19},{"ruleId":"112","severity":1,"message":"129","line":7,"column":21,"nodeType":"114","messageId":"115","endLine":7,"endColumn":30},{"ruleId":"118","severity":1,"message":"119","line":30,"column":27,"nodeType":"120","messageId":"121","endLine":30,"endColumn":29},{"ruleId":"130","severity":1,"message":"131","line":42,"column":8,"nodeType":"132","endLine":42,"endColumn":41,"suggestions":"133"},{"ruleId":"112","severity":1,"message":"134","line":131,"column":7,"nodeType":"114","messageId":"115","endLine":131,"endColumn":20},{"ruleId":"130","severity":1,"message":"135","line":82,"column":8,"nodeType":"132","endLine":82,"endColumn":28,"suggestions":"136"},{"ruleId":"118","severity":1,"message":"119","line":15,"column":33,"nodeType":"120","messageId":"121","endLine":15,"endColumn":35},{"ruleId":"118","severity":1,"message":"119","line":43,"column":29,"nodeType":"120","messageId":"121","endLine":43,"endColumn":31},{"ruleId":"112","severity":1,"message":"137","line":5,"column":10,"nodeType":"114","messageId":"115","endLine":5,"endColumn":30},{"ruleId":"130","severity":1,"message":"138","line":18,"column":11,"nodeType":"139","endLine":31,"endColumn":6},{"ruleId":"112","severity":1,"message":"140","line":44,"column":11,"nodeType":"114","messageId":"115","endLine":44,"endColumn":25},{"ruleId":"112","severity":1,"message":"141","line":63,"column":15,"nodeType":"114","messageId":"115","endLine":63,"endColumn":27},{"ruleId":"112","severity":1,"message":"142","line":3,"column":10,"nodeType":"114","messageId":"115","endLine":3,"endColumn":21},{"ruleId":"112","severity":1,"message":"127","line":1,"column":10,"nodeType":"114","messageId":"115","endLine":1,"endColumn":19},{"ruleId":"143","severity":1,"message":"144","line":86,"column":31,"nodeType":"145","messageId":"146","endLine":86,"endColumn":33},{"ruleId":"143","severity":1,"message":"144","line":86,"column":57,"nodeType":"145","messageId":"146","endLine":86,"endColumn":59},{"ruleId":"112","severity":1,"message":"147","line":91,"column":15,"nodeType":"114","messageId":"115","endLine":91,"endColumn":21},{"ruleId":"112","severity":1,"message":"148","line":92,"column":15,"nodeType":"114","messageId":"115","endLine":92,"endColumn":21},{"ruleId":"118","severity":1,"message":"119","line":107,"column":22,"nodeType":"120","messageId":"121","endLine":107,"endColumn":24},{"ruleId":"118","severity":1,"message":"119","line":109,"column":27,"nodeType":"120","messageId":"121","endLine":109,"endColumn":29},{"ruleId":"118","severity":1,"message":"119","line":111,"column":27,"nodeType":"120","messageId":"121","endLine":111,"endColumn":29},{"ruleId":"118","severity":1,"message":"119","line":113,"column":27,"nodeType":"120","messageId":"121","endLine":113,"endColumn":29},{"ruleId":"118","severity":1,"message":"119","line":115,"column":27,"nodeType":"120","messageId":"121","endLine":115,"endColumn":29},{"ruleId":"118","severity":1,"message":"119","line":123,"column":22,"nodeType":"120","messageId":"121","endLine":123,"endColumn":24},{"ruleId":"118","severity":1,"message":"119","line":125,"column":27,"nodeType":"120","messageId":"121","endLine":125,"endColumn":29},{"ruleId":"118","severity":1,"message":"119","line":127,"column":27,"nodeType":"120","messageId":"121","endLine":127,"endColumn":29},{"ruleId":"118","severity":1,"message":"119","line":129,"column":27,"nodeType":"120","messageId":"121","endLine":129,"endColumn":29},{"ruleId":"112","severity":1,"message":"127","line":1,"column":10,"nodeType":"114","messageId":"115","endLine":1,"endColumn":19},{"ruleId":"112","severity":1,"message":"124","line":2,"column":8,"nodeType":"114","messageId":"115","endLine":2,"endColumn":14},{"ruleId":"112","severity":1,"message":"149","line":29,"column":11,"nodeType":"114","messageId":"115","endLine":29,"endColumn":13},{"ruleId":"112","severity":1,"message":"150","line":32,"column":11,"nodeType":"114","messageId":"115","endLine":32,"endColumn":16},"no-native-reassign",["151"],"no-negated-in-lhs",["152"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'isLoggedIn' is defined but never used.","'toast' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'PlayerLink' is assigned a value but never used.","'useState' is defined but never used.","'styled' is defined but never used.","'PlayerInfo' is defined but never used.","'axios' is defined but never used.","'useEffect' is defined but never used.","'BoardTile' is defined but never used.","'GameState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'getCurrentPlayerName'. Either exclude it or remove the dependency array. Outer scope values like 'getCurrentPlayerName' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["153"],"'MainContainer' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'getNextPlayer'. Either include it or remove the dependency array.",["154"],"'getCurrentPlayerName' is defined but never used.","The 'setOrderedLetters' function makes the dependencies of useEffect Hook (at line 37) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'setOrderedLetters' in its own useCallback() Hook.","VariableDeclarator","'setLetterOrder' is assigned a value but never used.","'letterTileEl' is assigned a value but never used.","'useCallback' is defined but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'letter' is assigned a value but never used.","'points' is assigned a value but never used.","'id' is assigned a value but never used.","'style' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},"Update the dependencies array to be: [gameState]",{"range":"159","text":"160"},"Update the dependencies array to be: [copyState, getNextPlayer]",{"range":"161","text":"162"},[1780,1813],"[gameState]",[2610,2630],"[copyState, getNextPlayer]"]