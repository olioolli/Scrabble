{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { BE_URL } from \"../state\";\nimport { getCurrentPlayerName } from \"./utils\";\nconst initialGameState = {\n  playerPoints: [],\n  turnOfPlayer: \"\",\n  pouchLetters: [],\n  board: [],\n  playerHands: {}\n};\nexport const useGameState = () => {\n  _s();\n\n  const players = [\"Player1\", \"Player2\"]; // TODO: move to backend\n\n  const [gameState, setGameState] = useState(initialGameState);\n\n  const copyState = () => {\n    const playerPoints = [...gameState.playerPoints];\n    const turnOfPlayer = \"\" + gameState.turnOfPlayer;\n    const pouchLetters = [...gameState.pouchLetters];\n    const board = [];\n    const playerHands = {};\n\n    for (var i = 0; i < gameState.board.length; i++) board[i] = gameState.board[i].slice();\n\n    for (let i in gameState.playerHands) playerHands[i] = gameState.playerHands[i].slice();\n\n    return {\n      playerPoints,\n      turnOfPlayer,\n      pouchLetters,\n      board,\n      playerHands\n    };\n  };\n\n  const fetchGameStateFromBe = useCallback(() => {\n    axios.get(BE_URL + \"/game\").then(resp => {\n      setGameState(resp.data);\n    });\n  }, []);\n\n  const sendGameStateToBE = async state => {\n    const resp = await axios.post(BE_URL + \"/game\", {\n      game: state\n    });\n    setGameState(resp.data);\n  };\n\n  useEffect(() => {\n    fetchGameStateFromBe();\n  }, [fetchGameStateFromBe]);\n\n  const getPlayers = () => players;\n\n  const togglePlayerTurn = useCallback(async () => {\n    const gameStateCopy = copyState();\n    const nextPlayer = gameStateCopy.turnOfPlayer === players[0] ? players[1] : players[0];\n    gameStateCopy.turnOfPlayer = nextPlayer;\n    await sendGameStateToBE(gameStateCopy);\n  }, [gameState, copyState]);\n\n  const moveLetterToPouchFromHand = async letter => {\n    const gameStateCopy = copyState();\n    const idx = gameStateCopy.playerHands[getCurrentPlayerName()].findIndex(l => l.id === letter.id);\n    gameStateCopy.playerHands[getCurrentPlayerName()].splice(idx, 1);\n    gameStateCopy.pouchLetters.push(letter);\n    await sendGameStateToBE(gameStateCopy);\n  };\n\n  const moveLetterToHandFromPouch = async letter => {\n    const idx = gameState.pouchLetters.findIndex(pouchLetter => pouchLetter.id === letter.id);\n    if (idx === -1) return;\n    const gameStateCopy = copyState();\n    gameStateCopy.pouchLetters.splice(idx, 1);\n    gameStateCopy.playerHands[getCurrentPlayerName()].push(letter);\n    await sendGameStateToBE(gameStateCopy);\n  };\n\n  const removeTileFromPlayerHand = (hand, letterTile) => {\n    if (!hand || hand.length === 0) return;\n    const tileIdx = hand.findIndex((tile, idx) => tile.id === letterTile.id);\n    if (tileIdx === -1) return;\n    hand.splice(tileIdx, 1);\n  };\n\n  const moveLetterFromHandToBoard = async (letterTile, x, y) => {\n    const stateCopy = copyState(); // update board\n\n    stateCopy.board[x][y].letter = letterTile.letter;\n    stateCopy.board[x][y].points = letterTile.points; //update hand\n\n    removeTileFromPlayerHand(stateCopy.playerHands[getCurrentPlayerName()], letterTile);\n    await sendGameStateToBE(stateCopy);\n  };\n\n  return {\n    gameState: gameState,\n    setGameState: setGameState,\n    fetchGameStateFromBe: fetchGameStateFromBe,\n    moveLetterToHandFromPouch: moveLetterToHandFromPouch,\n    sendGameStateToBE: sendGameStateToBE,\n    moveLetterFromHandToBoard,\n    togglePlayerTurn,\n    getPlayers,\n    moveLetterToPouchFromHand\n  };\n};\n\n_s(useGameState, \"j0EFXx+sZsfw0UgD61Z+NzxkDEk=\");","map":{"version":3,"sources":["C:/Users/Olli/Documents/scrabble-app/my-app/src/util/GameStateProvider.ts"],"names":["axios","useCallback","useEffect","useState","BE_URL","getCurrentPlayerName","initialGameState","playerPoints","turnOfPlayer","pouchLetters","board","playerHands","useGameState","players","gameState","setGameState","copyState","i","length","slice","fetchGameStateFromBe","get","then","resp","data","sendGameStateToBE","state","post","game","getPlayers","togglePlayerTurn","gameStateCopy","nextPlayer","moveLetterToPouchFromHand","letter","idx","findIndex","l","id","splice","push","moveLetterToHandFromPouch","pouchLetter","removeTileFromPlayerHand","hand","letterTile","tileIdx","tile","moveLetterFromHandToBoard","x","y","stateCopy","points"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { BoardTile, GameState, LetterTile } from \"../../../scrabble-backend/server\";\r\nimport { BE_URL } from \"../state\";\r\nimport { getCurrentPlayerName } from \"./utils\";\r\n\r\nconst initialGameState = {\r\n    playerPoints: [],\r\n    turnOfPlayer: \"\",\r\n    pouchLetters: [],\r\n    board: [],\r\n    playerHands: {}\r\n}\r\n\r\nexport const useGameState = () => {\r\n\r\n    const players = [\"Player1\",\"Player2\"]; // TODO: move to backend\r\n\r\n    const [gameState, setGameState] = useState<GameState>(initialGameState);\r\n\r\n    const copyState = () : GameState => {\r\n      \r\n        const playerPoints = [...gameState.playerPoints];\r\n        const turnOfPlayer = \"\"+gameState.turnOfPlayer;\r\n        const pouchLetters = [...gameState.pouchLetters];\r\n        const board : BoardTile[][] = [];\r\n        const playerHands : Record<string, LetterTile[]> = {};\r\n\r\n        for (var i = 0; i < gameState.board.length; i++)\r\n            board[i] = gameState.board[i].slice();\r\n\r\n        for(let i in gameState.playerHands ) \r\n            playerHands[i] = gameState.playerHands[i].slice();\r\n\r\n        return {\r\n            playerPoints,\r\n            turnOfPlayer,\r\n            pouchLetters,\r\n            board,\r\n            playerHands\r\n        }\r\n    }\r\n\r\n    const fetchGameStateFromBe = useCallback( () => {\r\n        axios.get(BE_URL + \"/game\").then((resp) => {\r\n            setGameState(resp.data);\r\n        })\r\n    },[]);\r\n\r\n    const sendGameStateToBE = async (state : GameState) => {\r\n        const resp = await axios.post(BE_URL+\"/game\",{ game: state });\r\n        setGameState(resp.data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchGameStateFromBe();\r\n    }, [fetchGameStateFromBe]);\r\n\r\n    const getPlayers = () : string[] => players;\r\n\r\n    const togglePlayerTurn = useCallback( async() => {\r\n        const gameStateCopy = copyState();\r\n        const nextPlayer = gameStateCopy.turnOfPlayer === players[0] ? players[1] : players[0];\r\n        gameStateCopy.turnOfPlayer = nextPlayer;\r\n        await sendGameStateToBE(gameStateCopy);\r\n    },[gameState, copyState]);\r\n\r\n    const moveLetterToPouchFromHand = async (letter : LetterTile) => {\r\n        const gameStateCopy = copyState();\r\n\r\n        const idx = gameStateCopy.playerHands[getCurrentPlayerName()].findIndex( l => l.id === letter.id);\r\n        gameStateCopy.playerHands[getCurrentPlayerName()].splice(idx,1);\r\n        gameStateCopy.pouchLetters.push(letter);\r\n        await sendGameStateToBE(gameStateCopy);\r\n    };\r\n\r\n    const moveLetterToHandFromPouch = async (letter : LetterTile) => {\r\n        const idx = gameState.pouchLetters.findIndex( (pouchLetter) => pouchLetter.id === letter.id );\r\n        if( idx === -1 ) return;\r\n        \r\n        const gameStateCopy = copyState();\r\n\r\n        gameStateCopy.pouchLetters.splice(idx,1);\r\n        gameStateCopy.playerHands[getCurrentPlayerName()].push(letter);\r\n\r\n        await sendGameStateToBE(gameStateCopy);\r\n    }\r\n\r\n    const removeTileFromPlayerHand = (hand : LetterTile[], letterTile : LetterTile) => {\r\n        if( !hand || hand.length === 0 ) return;\r\n\r\n        const tileIdx = hand.findIndex( (tile, idx) => tile.id === letterTile.id);\r\n        if( tileIdx === -1 ) return;\r\n\r\n        hand.splice(tileIdx,1);\r\n    }\r\n\r\n    const moveLetterFromHandToBoard = async (letterTile : LetterTile, x: number, y : number) => {\r\n        const stateCopy = copyState();\r\n\r\n        // update board\r\n        stateCopy.board[x][y].letter = letterTile.letter;\r\n        stateCopy.board[x][y].points = letterTile.points;\r\n\r\n        //update hand\r\n        removeTileFromPlayerHand(stateCopy.playerHands[getCurrentPlayerName()], letterTile);\r\n\r\n        await sendGameStateToBE(stateCopy);\r\n    }\r\n\r\n    return {\r\n        gameState : gameState,\r\n        setGameState : setGameState,\r\n        fetchGameStateFromBe : fetchGameStateFromBe,\r\n        moveLetterToHandFromPouch : moveLetterToHandFromPouch,\r\n        sendGameStateToBE : sendGameStateToBE,\r\n        moveLetterFromHandToBoard,\r\n        togglePlayerTurn,\r\n        getPlayers,\r\n        moveLetterToPouchFromHand\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}