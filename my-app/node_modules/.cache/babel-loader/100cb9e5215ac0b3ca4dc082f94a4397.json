{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Olli\\\\Documents\\\\scrabble-app\\\\my-app\\\\src\\\\auth.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\n// Hook (use-auth.js)\nimport axios from \"axios\";\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { BE_URL } from \"./state\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst authContext = /*#__PURE__*/createContext({\n  user: null,\n  logi\n}); // Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\n\nexport function ProvideAuth({\n  children\n}) {\n  _s();\n\n  const auth = useProvideAuth();\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: auth,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 10\n  }, this);\n} // Hook for child components to get the auth object ...\n// ... and re-render when it changes.\n\n_s(ProvideAuth, \"XNU4Jn8u4aVzJknlKOHFJq03xMo=\", false, function () {\n  return [useProvideAuth];\n});\n\n_c = ProvideAuth;\nexport const useAuth = () => {\n  _s2();\n\n  return useContext(authContext);\n};\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth() {\n  _s3();\n\n  const [user, setUser] = useState(null);\n\n  const login = (username, password) => {\n    axios.post(BE_URL + \"/login\", {\n      username: username,\n      password: password\n    }).then(response => {\n      if (response.status == 200) {\n        setUser(username);\n        return true;\n      } else {\n        toast(\"Login failed!\", {\n          position: \"bottom-center\",\n          autoClose: 1000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: false\n        });\n        setUser(null);\n      }\n    }).catch(err => {\n      toast(\"Login failed!\", {\n        position: \"bottom-center\",\n        autoClose: 1000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: false,\n        draggable: false\n      });\n      setUser(null);\n    });\n    return false;\n  };\n\n  const logout = () => {\n    setUser(null);\n    return true;\n  }; // Subscribe to user on mount\n  // Because this sets state in the callback it will cause any ...\n  // ... component that utilizes this hook to re-render with the ...\n  // ... latest auth object.\n\n\n  useEffect(() => {\n    axios.get(`${BE_URL}\\isLoggedIn?username=${user}`).then(resp => {\n      if (resp.data) setUser(user);else setUser(null);\n    });\n  }, []); // Return the user object and auth methods\n\n  return {\n    user,\n    login,\n    logout\n  };\n}\n\n_s3(useProvideAuth, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ProvideAuth\");","map":{"version":3,"sources":["C:/Users/Olli/Documents/scrabble-app/my-app/src/auth.tsx"],"names":["axios","React","useState","useEffect","useContext","createContext","toast","BE_URL","authContext","user","logi","ProvideAuth","children","auth","useProvideAuth","useAuth","setUser","login","username","password","post","then","response","status","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","catch","err","logout","get","resp","data"],"mappings":"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","sourcesContent":["// Hook (use-auth.js)\r\nimport axios from \"axios\";\r\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { BE_URL } from \"./state\";\r\n\r\nconst authContext = createContext<AuthContext>({ user: null, logi});\r\n// Provider component that wraps your app and makes auth object ...\r\n// ... available to any child component that calls useAuth().\r\nexport function ProvideAuth({ children }) {\r\n  const auth = useProvideAuth();\r\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\r\n}\r\n// Hook for child components to get the auth object ...\r\n// ... and re-render when it changes.\r\nexport const useAuth = () => {\r\n  return useContext(authContext);\r\n};\r\n\r\nexport type AuthContext = {\r\n    user : string | null;\r\n    login : (username : string, password: string) => boolean;\r\n    logout : () => boolean;\r\n}\r\n\r\n// Provider hook that creates auth object and handles state\r\nfunction useProvideAuth() : AuthContext {\r\n\r\n  const [user, setUser] = useState(null);\r\n  \r\n  const login = (username, password) => {\r\n    \r\n    axios.post(BE_URL+\"/login\",{\r\n        username: username,\r\n        password: password\r\n    }\r\n    ).then((response) => {\r\n\r\n        if( response.status == 200 ) {\r\n            setUser(username);\r\n            return true;\r\n        }\r\n        else {\r\n            toast(\"Login failed!\", {\r\n                position: \"bottom-center\",\r\n                autoClose: 1000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                });\r\n            setUser(null);\r\n        }\r\n    }).catch( (err) => {\r\n        toast(\"Login failed!\", {\r\n            position: \"bottom-center\",\r\n            autoClose: 1000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: false,\r\n            draggable: false,\r\n            });\r\n        setUser(null);\r\n    })\r\n\r\n    return false;\r\n  };\r\n\r\n  const logout = () => {\r\n\r\n    setUser(null);\r\n    return true;\r\n  };\r\n  \r\n  // Subscribe to user on mount\r\n  // Because this sets state in the callback it will cause any ...\r\n  // ... component that utilizes this hook to re-render with the ...\r\n  // ... latest auth object.\r\n  useEffect(() => {\r\n\r\n    axios.get(`${BE_URL}\\isLoggedIn?username=${user}`).then( (resp) => {\r\n        if( resp.data )\r\n            setUser(user);\r\n        else\r\n            setUser(null);\r\n    });\r\n  }, []);\r\n  // Return the user object and auth methods\r\n  return {\r\n    user,\r\n    login,\r\n    logout,\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}