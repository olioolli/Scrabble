{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { BE_URL, BE_WS_URL } from \"../state\";\nimport { getCurrentPlayerName } from \"./utils\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nconst initialGameState = {\n  playerPoints: {},\n  turnOfPlayer: \"\",\n  pouchLetters: [],\n  board: [],\n  playerHands: {}\n};\nexport const useGameState = () => {\n  _s();\n\n  const players = [\"Player1\", \"Player2\"]; // TODO: move to backend\n\n  const [gameState, setGameState] = useState(initialGameState);\n\n  const copyState = () => {\n    const playerPoints = {};\n    const turnOfPlayer = \"\" + gameState.turnOfPlayer;\n    const pouchLetters = [...gameState.pouchLetters];\n    const board = [];\n    const playerHands = {};\n\n    for (var i = 0; i < gameState.playerPoints.length; i++) playerPoints[i] = gameState.playerPoints[i];\n\n    for (var i = 0; i < gameState.board.length; i++) board[i] = gameState.board[i].slice();\n\n    for (let i in gameState.playerHands) playerHands[i] = gameState.playerHands[i].slice();\n\n    return {\n      playerPoints,\n      turnOfPlayer,\n      pouchLetters,\n      board,\n      playerHands\n    };\n  };\n\n  const fetchGameStateFromBe = useCallback(() => {\n    axios.get(BE_URL + \"/game\").then(resp => {\n      setGameState(resp.data);\n    });\n  }, []);\n\n  const sendGameStateToBE = async state => {\n    const resp = await axios.post(BE_URL + \"/game\", {\n      game: state\n    });\n    setGameState(resp.data);\n  };\n\n  useEffect(() => {\n    let client = new W3CWebSocket(BE_WS_URL);\n\n    client.onopen = () => {};\n\n    client.onmessage = message => {\n      const newGameState = JSON.parse(message.data);\n      if (newGameState) setGameState(newGameState);\n    };\n\n    fetchGameStateFromBe();\n  }, [fetchGameStateFromBe]);\n\n  const getPlayers = () => players;\n\n  const togglePlayerTurn = useCallback(async () => {\n    const gameStateCopy = copyState();\n    const nextPlayer = gameStateCopy.turnOfPlayer === players[0] ? players[1] : players[0];\n    gameStateCopy.turnOfPlayer = nextPlayer;\n    await sendGameStateToBE(gameStateCopy);\n  }, [gameState, copyState]);\n\n  const moveLetterToPouchFromHand = async letter => {\n    const gameStateCopy = copyState();\n    const idx = gameStateCopy.playerHands[getCurrentPlayerName()].findIndex(l => l.id === letter.id);\n    gameStateCopy.playerHands[getCurrentPlayerName()].splice(idx, 1);\n    gameStateCopy.pouchLetters.push(letter);\n    await sendGameStateToBE(gameStateCopy);\n  };\n\n  const moveLetterToHandFromPouch = async letter => {\n    const idx = gameState.pouchLetters.findIndex(pouchLetter => pouchLetter.id === letter.id);\n    if (idx === -1) return;\n    const gameStateCopy = copyState();\n    gameStateCopy.pouchLetters.splice(idx, 1);\n    gameStateCopy.playerHands[getCurrentPlayerName()].push(letter);\n    await sendGameStateToBE(gameStateCopy);\n  };\n\n  const removeTileFromPlayerHand = (hand, letterTile) => {\n    if (!hand || hand.length === 0) return;\n    const tileIdx = hand.findIndex((tile, idx) => tile.id === letterTile.id);\n    if (tileIdx === -1) return;\n    hand.splice(tileIdx, 1);\n  };\n\n  const moveLetterFromHandToBoard = async (letterTile, x, y) => {\n    const stateCopy = copyState(); // update board\n\n    stateCopy.board[x][y].letter = letterTile.letter;\n    stateCopy.board[x][y].points = letterTile.points; //update hand\n\n    removeTileFromPlayerHand(stateCopy.playerHands[getCurrentPlayerName()], letterTile);\n    await sendGameStateToBE(stateCopy);\n  };\n\n  const updatePlayerPoints = async (playerName, newPoints) => {\n    const stateCopy = copyState();\n    stateCopy.playerPoints[playerName] = newPoints;\n    await sendGameStateToBE(stateCopy);\n  };\n\n  return {\n    gameState: gameState,\n    setGameState: setGameState,\n    fetchGameStateFromBe: fetchGameStateFromBe,\n    moveLetterToHandFromPouch: moveLetterToHandFromPouch,\n    sendGameStateToBE: sendGameStateToBE,\n    moveLetterFromHandToBoard,\n    togglePlayerTurn,\n    getPlayers,\n    moveLetterToPouchFromHand,\n    updatePlayerPoints\n  };\n};\n\n_s(useGameState, \"j0EFXx+sZsfw0UgD61Z+NzxkDEk=\");","map":{"version":3,"sources":["C:/Users/Olli/Documents/scrabble-app/my-app/src/util/GameStateProvider.ts"],"names":["axios","useCallback","useEffect","useState","BE_URL","BE_WS_URL","getCurrentPlayerName","w3cwebsocket","W3CWebSocket","initialGameState","playerPoints","turnOfPlayer","pouchLetters","board","playerHands","useGameState","players","gameState","setGameState","copyState","i","length","slice","fetchGameStateFromBe","get","then","resp","data","sendGameStateToBE","state","post","game","client","onopen","onmessage","message","newGameState","JSON","parse","getPlayers","togglePlayerTurn","gameStateCopy","nextPlayer","moveLetterToPouchFromHand","letter","idx","findIndex","l","id","splice","push","moveLetterToHandFromPouch","pouchLetter","removeTileFromPlayerHand","hand","letterTile","tileIdx","tile","moveLetterFromHandToBoard","x","y","stateCopy","points","updatePlayerPoints","playerName","newPoints"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { BoardTile, GameState, LetterTile } from \"../../../scrabble-backend/server\";\r\nimport { BE_URL, BE_WS_URL } from \"../state\";\r\nimport { getCurrentPlayerName } from \"./utils\";\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\n\r\nconst initialGameState = {\r\n    playerPoints: {},\r\n    turnOfPlayer: \"\",\r\n    pouchLetters: [],\r\n    board: [],\r\n    playerHands: {}\r\n}\r\n\r\nexport const useGameState = () => {\r\n\r\n    const players = [\"Player1\", \"Player2\"]; // TODO: move to backend\r\n\r\n    const [gameState, setGameState] = useState<GameState>(initialGameState);\r\n\r\n    const copyState = (): GameState => {\r\n\r\n        const playerPoints = {};\r\n        const turnOfPlayer = \"\" + gameState.turnOfPlayer;\r\n        const pouchLetters = [...gameState.pouchLetters];\r\n        const board: BoardTile[][] = [];\r\n        const playerHands: Record<string, LetterTile[]> = {};\r\n\r\n        for(var i = 0; i < gameState.playerPoints.length; i++)\r\n            playerPoints[i] = gameState.playerPoints[i];\r\n\r\n        for (var i = 0; i < gameState.board.length; i++)\r\n            board[i] = gameState.board[i].slice();\r\n\r\n        for (let i in gameState.playerHands)\r\n            playerHands[i] = gameState.playerHands[i].slice();\r\n\r\n        return {\r\n            playerPoints,\r\n            turnOfPlayer,\r\n            pouchLetters,\r\n            board,\r\n            playerHands\r\n        }\r\n    }\r\n\r\n    const fetchGameStateFromBe = useCallback(() => {\r\n        axios.get(BE_URL + \"/game\").then((resp) => {\r\n            setGameState(resp.data);\r\n        })\r\n    }, []);\r\n\r\n    const sendGameStateToBE = async (state: GameState) => {\r\n        const resp = await axios.post(BE_URL + \"/game\", { game: state });\r\n        setGameState(resp.data);\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        let client = new W3CWebSocket(BE_WS_URL);\r\n\r\n        client.onopen = () => {};\r\n\r\n        client.onmessage = (message) => {\r\n\r\n            const newGameState = JSON.parse(message.data as string);\r\n            if (newGameState)\r\n                setGameState(newGameState);\r\n        };\r\n\r\n        fetchGameStateFromBe();\r\n    }, [fetchGameStateFromBe]);\r\n\r\n    const getPlayers = (): string[] => players;\r\n\r\n    const togglePlayerTurn = useCallback(async () => {\r\n        const gameStateCopy = copyState();\r\n        const nextPlayer = gameStateCopy.turnOfPlayer === players[0] ? players[1] : players[0];\r\n        gameStateCopy.turnOfPlayer = nextPlayer;\r\n        await sendGameStateToBE(gameStateCopy);\r\n    }, [gameState, copyState]);\r\n\r\n    const moveLetterToPouchFromHand = async (letter: LetterTile) => {\r\n        const gameStateCopy = copyState();\r\n\r\n        const idx = gameStateCopy.playerHands[getCurrentPlayerName()].findIndex(l => l.id === letter.id);\r\n        gameStateCopy.playerHands[getCurrentPlayerName()].splice(idx, 1);\r\n        gameStateCopy.pouchLetters.push(letter);\r\n        await sendGameStateToBE(gameStateCopy);\r\n    };\r\n\r\n    const moveLetterToHandFromPouch = async (letter: LetterTile) => {\r\n        const idx = gameState.pouchLetters.findIndex((pouchLetter) => pouchLetter.id === letter.id);\r\n        if (idx === -1) return;\r\n\r\n        const gameStateCopy = copyState();\r\n\r\n        gameStateCopy.pouchLetters.splice(idx, 1);\r\n        gameStateCopy.playerHands[getCurrentPlayerName()].push(letter);\r\n\r\n        await sendGameStateToBE(gameStateCopy);\r\n    }\r\n\r\n    const removeTileFromPlayerHand = (hand: LetterTile[], letterTile: LetterTile) => {\r\n        if (!hand || hand.length === 0) return;\r\n\r\n        const tileIdx = hand.findIndex((tile, idx) => tile.id === letterTile.id);\r\n        if (tileIdx === -1) return;\r\n\r\n        hand.splice(tileIdx, 1);\r\n    }\r\n\r\n    const moveLetterFromHandToBoard = async (letterTile: LetterTile, x: number, y: number) => {\r\n        const stateCopy = copyState();\r\n\r\n        // update board\r\n        stateCopy.board[x][y].letter = letterTile.letter;\r\n        stateCopy.board[x][y].points = letterTile.points;\r\n\r\n        //update hand\r\n        removeTileFromPlayerHand(stateCopy.playerHands[getCurrentPlayerName()], letterTile);\r\n\r\n        await sendGameStateToBE(stateCopy);\r\n    }\r\n\r\n    const updatePlayerPoints = async (playerName : string, newPoints : number) => {\r\n        const stateCopy = copyState();\r\n        stateCopy.playerPoints[playerName] = newPoints;\r\n        await sendGameStateToBE(stateCopy);\r\n    }\r\n\r\n    return {\r\n        gameState: gameState,\r\n        setGameState: setGameState,\r\n        fetchGameStateFromBe: fetchGameStateFromBe,\r\n        moveLetterToHandFromPouch: moveLetterToHandFromPouch,\r\n        sendGameStateToBE: sendGameStateToBE,\r\n        moveLetterFromHandToBoard,\r\n        togglePlayerTurn,\r\n        getPlayers,\r\n        moveLetterToPouchFromHand,\r\n        updatePlayerPoints\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}