{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { BE_URL } from \"../state\";\nimport { getCurrentPlayerName } from \"./utils\";\nconst initialGameState = {\n  playerPoints: [],\n  turnOfPlayer: \"\",\n  pouchLetters: [],\n  board: [],\n  playerHands: {}\n};\nexport const useGameState = () => {\n  _s();\n\n  const [gameState, setGameState] = useState(initialGameState);\n  const [board, setBoard] = useState([]);\n  const fetchGameStateFromBe = useCallback(() => {\n    axios.get(BE_URL + \"/game\").then(resp => {\n      setGameState(resp.data);\n      setBoard(resp.data.board);\n    });\n  }, []);\n\n  const sendGameStateToBE = async state => {\n    const resp = await axios.post(BE_URL + \"/game\", {\n      game: state\n    });\n    return resp.data;\n  };\n\n  useEffect(() => {\n    fetchGameStateFromBe();\n  }, [fetchGameStateFromBe]);\n\n  const moveLetterToHandFromPouch = async letter => {\n    const idx = gameState.pouchLetters.findIndex(pouchLetter => pouchLetter.id === letter.id);\n    if (idx === -1) return;\n    const gameStateCopy = copyState();\n    gameStateCopy.pouchLetters.splice(idx, 1);\n    gameStateCopy.playerHands[getCurrentPlayerName()].push(letter);\n    await sendGameStateToBE(gameStateCopy);\n    setGameState(gameStateCopy);\n  };\n\n  const removeTileFromPlayerHand = (hand, letterTile) => {\n    if (!hand || hand.length === 0) return;\n    const tileIdx = hand.findIndex((tile, idx) => tile.id === letterTile.id);\n    if (tileIdx === -1) return;\n    hand.splice(tileIdx, 1);\n  };\n\n  const moveLetterFromHandToBoard = async (letterTile, x, y) => {\n    const stateCopy = copyState(); // update board\n\n    stateCopy.board[x][y].letter = letterTile.letter;\n    stateCopy.board[x][y].points = letterTile.points; //update hand\n\n    removeTileFromPlayerHand(stateCopy.playerHands[getCurrentPlayerName()], letterTile);\n    const stateFromBe = await sendGameStateToBE(stateCopy);\n    setGameState(gameState);\n  };\n\n  const copyState = () => {\n    const playerPoints = [...gameState.playerPoints];\n    const turnOfPlayer = \"\" + gameState.turnOfPlayer;\n    const pouchLetters = [...gameState.pouchLetters];\n    const board = [];\n    const playerHands = {};\n\n    for (var i = 0; i < gameState.board.length; i++) board[i] = gameState.board[i].slice();\n\n    for (let i in gameState.playerHands) playerHands[i] = gameState.playerHands[i].slice();\n\n    return {\n      playerPoints,\n      turnOfPlayer,\n      pouchLetters,\n      board,\n      playerHands\n    };\n  };\n\n  return {\n    gameState: gameState,\n    setGameState: setGameState,\n    fetchGameStateFromBe: fetchGameStateFromBe,\n    moveLetterToHandFromPouch: moveLetterToHandFromPouch,\n    sendGameStateToBE: sendGameStateToBE,\n    moveLetterFromHandToBoard,\n    board\n  };\n};\n\n_s(useGameState, \"a6oQANzFtGfiAOXazjCb8knxuRQ=\");","map":{"version":3,"sources":["C:/Users/Olli/Documents/scrabble-app/my-app/src/util/GameStateProvider.ts"],"names":["axios","useCallback","useEffect","useState","BE_URL","getCurrentPlayerName","initialGameState","playerPoints","turnOfPlayer","pouchLetters","board","playerHands","useGameState","gameState","setGameState","setBoard","fetchGameStateFromBe","get","then","resp","data","sendGameStateToBE","state","post","game","moveLetterToHandFromPouch","letter","idx","findIndex","pouchLetter","id","gameStateCopy","copyState","splice","push","removeTileFromPlayerHand","hand","letterTile","length","tileIdx","tile","moveLetterFromHandToBoard","x","y","stateCopy","points","stateFromBe","i","slice"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { BoardTile, GameState, LetterTile } from \"../../../scrabble-backend/server\";\r\nimport { BE_URL } from \"../state\";\r\nimport { getCurrentPlayerName } from \"./utils\";\r\n\r\nconst initialGameState = {\r\n    playerPoints: [],\r\n    turnOfPlayer: \"\",\r\n    pouchLetters: [],\r\n    board: [],\r\n    playerHands: {}\r\n}\r\n\r\nexport const useGameState = () => {\r\n\r\n    const [gameState, setGameState] = useState<GameState>(initialGameState);\r\n    const [board, setBoard] = useState<BoardTile[][]>([]);\r\n\r\n    const fetchGameStateFromBe = useCallback( () => {\r\n        axios.get(BE_URL + \"/game\").then((resp) => {\r\n            setGameState(resp.data);\r\n            setBoard(resp.data.board);\r\n        })\r\n    },[]);\r\n\r\n    const sendGameStateToBE = async (state : GameState) => {\r\n        const resp = await axios.post(BE_URL+\"/game\",{ game: state });\r\n        return resp.data;\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchGameStateFromBe();\r\n    }, [fetchGameStateFromBe]);\r\n\r\n    const moveLetterToHandFromPouch = async (letter : LetterTile) => {\r\n        const idx = gameState.pouchLetters.findIndex( (pouchLetter) => pouchLetter.id === letter.id );\r\n        if( idx === -1 ) return;\r\n        \r\n        const gameStateCopy = copyState();\r\n\r\n        gameStateCopy.pouchLetters.splice(idx,1);\r\n        gameStateCopy.playerHands[getCurrentPlayerName()].push(letter);\r\n\r\n        await sendGameStateToBE(gameStateCopy);\r\n        setGameState(gameStateCopy);\r\n    }\r\n\r\n    const removeTileFromPlayerHand = (hand : LetterTile[], letterTile : LetterTile) => {\r\n        if( !hand || hand.length === 0 ) return;\r\n\r\n        const tileIdx = hand.findIndex( (tile, idx) => tile.id === letterTile.id);\r\n        if( tileIdx === -1 ) return;\r\n\r\n        hand.splice(tileIdx,1);\r\n    }\r\n\r\n    const moveLetterFromHandToBoard = async (letterTile : LetterTile, x: number, y : number) => {\r\n        const stateCopy = copyState();\r\n\r\n        // update board\r\n        stateCopy.board[x][y].letter = letterTile.letter;\r\n        stateCopy.board[x][y].points = letterTile.points;\r\n\r\n        //update hand\r\n        removeTileFromPlayerHand(stateCopy.playerHands[getCurrentPlayerName()], letterTile);\r\n\r\n        const stateFromBe = await sendGameStateToBE(stateCopy);\r\n        setGameState(gameState);\r\n    }\r\n\r\n    const copyState = () : GameState => {\r\n      \r\n        const playerPoints = [...gameState.playerPoints];\r\n        const turnOfPlayer = \"\"+gameState.turnOfPlayer;\r\n        const pouchLetters = [...gameState.pouchLetters];\r\n        const board : BoardTile[][] = [];\r\n        const playerHands : Record<string, LetterTile[]> = {};\r\n\r\n        for (var i = 0; i < gameState.board.length; i++)\r\n            board[i] = gameState.board[i].slice();\r\n\r\n        for(let i in gameState.playerHands ) \r\n            playerHands[i] = gameState.playerHands[i].slice();\r\n\r\n        return {\r\n            playerPoints,\r\n            turnOfPlayer,\r\n            pouchLetters,\r\n            board,\r\n            playerHands\r\n        }\r\n    }\r\n\r\n    return {\r\n        gameState : gameState,\r\n        setGameState : setGameState,\r\n        fetchGameStateFromBe : fetchGameStateFromBe,\r\n        moveLetterToHandFromPouch : moveLetterToHandFromPouch,\r\n        sendGameStateToBE : sendGameStateToBE,\r\n        moveLetterFromHandToBoard,\r\n        board\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}